{"version":3,"file":"manage.min.js","sources":["../../src/tiny/manage.js"],"sourcesContent":["import {setupForElementId} from \"editor_tiny/editor\";\r\nimport {clean} from \"./cleaner\";\r\nimport Notification from \"core/notification\";\r\n\r\n\r\n/**\r\n * Create tinyMCE in an elementId.\r\n * @param {string} elementId - The id of the area to create tinyMCE in.\r\n * @return {void}\r\n */\r\nexport const createTinyMCE = (elementId) => {\r\n  const options = window.dta_tiny_config;\r\n\r\n  if (!options) {\r\n    return;\r\n  }\r\n\r\n  setupForElementId({elementId, options}).then(() => {\r\n    clean();\r\n    return;\r\n  }).catch((error) => {\r\n    Notification.error(error);\r\n  });\r\n\r\n};\r\n\r\n/**\r\n * Remove tinyMCE from an area.\r\n * @param {string} area - The id of the area to remove tinyMCE from.\r\n * @return {void}\r\n */\r\nexport const removeTinyMCEFromArea = (area) => {\r\n  window.tinymce.get(area).remove();\r\n};\r\n\r\n/**\r\n * Get the content of a tinyMCE area.\r\n * @param {string} area - The id of the area to get the content from.\r\n * @returns {string} The content of the tinyMCE area.\r\n */\r\nexport const getTinyMCEContent = (area) => {\r\n  return window.tinyMCE.get(area).getContent();\r\n};\r\n\r\n\r\n"],"names":["elementId","options","window","dta_tiny_config","then","catch","error","area","tinymce","get","remove","tinyMCE","getContent"],"mappings":"sYAU8BA,kBACtBC,QAAUC,OAAOC,gBAElBF,uCAIa,CAACD,UAAAA,UAAWC,QAAAA,UAAUG,MAAK,6BAG1CC,OAAOC,8BACKA,MAAMA,0CAUeC,OACpCL,OAAOM,QAAQC,IAAIF,MAAMG,qCAQOH,MACzBL,OAAOS,QAAQF,IAAIF,MAAMK"}