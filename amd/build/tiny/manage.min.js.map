{"version":3,"file":"manage.min.js","sources":["../../src/tiny/manage.js"],"sourcesContent":["import { setupForElementId } from \"editor_tiny/editor\";\nimport { clean } from \"local_digitalta/tiny/cleaner\";\nimport Notification from \"core/notification\";\nimport { generateFileHash } from \"../files/filemanager\";\nimport { filesUploadFromDraft } from \"../repositories/files_repository\";\n\n/**\n * Create tinyMCE in an elementId.\n * @param {string} elementId - The id of the area to create tinyMCE in.\n * @return {void}\n */\nexport const createTinyMCE = (elementId) => {\n  const options = window.digitalta_tiny_config;\n  if (!options) {\n    return;\n  }\n  setupForElementId({ elementId, options })\n    .then(() => {\n      clean();\n      return;\n    })\n    .catch((error) => {\n      Notification.exception(error);\n    });\n};\n\nexport const processFiles = async (content) => {\n  const baseUrl = M.cfg.wwwroot.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n\n  const draftFilePattern = new RegExp(\n    `(${baseUrl}\\\\/draftfile\\\\.php\\\\/5\\\\/user\\\\/draft\\\\/(\\\\d+)\\\\/[^\"?]+)`,\n    \"g\"\n  );\n\n  const matches = Array.from(content.matchAll(draftFilePattern));\n\n  for (const match of matches) {\n    const fullUrl = match[1];\n    const draftid = match[2];\n    const filename = match[2];\n    const fileid = generateFileHash(filename);\n\n    const response = await filesUploadFromDraft({\n      draftid,\n      fileid,\n      filearea: \"local_digitalta\",\n    });\n\n    if (response.result) {\n        content = content.replace(new RegExp(fullUrl, \"g\"), response.url);\n      } else {\n        throw new Error(response.error || \"Error uploading file\");\n      }\n  }\n\n  return content;\n};\n\n/**\n * Remove tinyMCE from an area.\n * @param {string} area - The id of the area to remove tinyMCE from.\n * @return {void}\n */\nexport const removeTinyMCEFromArea = (area) => {\n  window.tinyMCE.get(area).remove();\n};\n\n/**\n * Get the content of a tinyMCE area.\n * @param {string} area - The id of the area to get the content from.\n * @returns {string} The content of the tinyMCE area.\n */\nexport const getTinyMCEContent = (area) => {\n  return window.tinyMCE.get(area).getContent();\n};\n"],"names":["elementId","options","window","digitalta_tiny_config","then","catch","error","exception","async","baseUrl","M","cfg","wwwroot","replace","draftFilePattern","RegExp","matches","Array","from","content","matchAll","match","fullUrl","draftid","filename","fileid","response","filearea","result","Error","url","area","tinyMCE","get","remove","getContent"],"mappings":"8gBAW8BA,kBACtBC,QAAUC,OAAOC,sBAClBF,uCAGa,CAAED,UAAAA,UAAWC,QAAAA,UAC5BG,MAAK,6BAILC,OAAOC,8BACOC,UAAUD,iCAIDE,MAAAA,gBACpBC,QAAUC,EAAEC,IAAIC,QAAQC,QAAQ,yBAA0B,QAE1DC,iBAAmB,IAAIC,kBACvBN,oEACJ,KAGIO,QAAUC,MAAMC,KAAKC,QAAQC,SAASN,uBAEvC,MAAMO,SAASL,QAAS,OACrBM,QAAUD,MAAM,GAChBE,QAAUF,MAAM,GAChBG,SAAWH,MAAM,GACjBI,QAAS,iCAAiBD,UAE1BE,eAAiB,0CAAqB,CAC1CH,QAAAA,QACAE,OAAAA,OACAE,SAAU,wBAGRD,SAASE,aAGH,IAAIC,MAAMH,SAASpB,OAAS,wBAFlCa,QAAUA,QAAQN,QAAQ,IAAIE,OAAOO,QAAS,KAAMI,SAASI,YAM5DX,wCAQ6BY,OACpC7B,OAAO8B,QAAQC,IAAIF,MAAMG,qCAQOH,MACzB7B,OAAO8B,QAAQC,IAAIF,MAAMI"}