{"version":3,"file":"manage.min.js","sources":["../../src/tiny/manage.js"],"sourcesContent":["import {setupForElementId} from \"editor_tiny/editor\";\nimport {clean} from \"./cleaner\";\nimport Notification from \"core/notification\";\n\n\n/**\n * Create tinyMCE in an elementId.\n * @param {string} elementId - The id of the area to create tinyMCE in.\n * @return {void}\n */\nexport const createTinyMCE = (elementId) => {\n  const options = window.dta_tiny_config;\n\n  if (!options) {\n    return;\n  }\n\n  setupForElementId({elementId, options}).then(() => {\n    clean();\n    return;\n  }).catch((error) => {\n    Notification.error(error);\n  });\n\n};\n\n/**\n * Remove tinyMCE from an area.\n * @param {string} area - The id of the area to remove tinyMCE from.\n * @return {void}\n */\nexport const removeTinyMCEFromArea = (area) => {\n  window.tinymce.get(area).remove();\n};\n\n/**\n * Get the content of a tinyMCE area.\n * @param {string} area - The id of the area to get the content from.\n * @returns {string} The content of the tinyMCE area.\n */\nexport const getTinyMCEContent = (area) => {\n  return window.tinyMCE.get(area).getContent();\n};\n\n\n"],"names":["elementId","options","window","dta_tiny_config","then","catch","error","area","tinymce","get","remove","tinyMCE","getContent"],"mappings":"sYAU8BA,kBACtBC,QAAUC,OAAOC,gBAElBF,uCAIa,CAACD,UAAAA,UAAWC,QAAAA,UAAUG,MAAK,6BAG1CC,OAAOC,8BACKA,MAAMA,0CAUeC,OACpCL,OAAOM,QAAQC,IAAIF,MAAMG,qCAQOH,MACzBL,OAAOS,QAAQF,IAAIF,MAAMK"}