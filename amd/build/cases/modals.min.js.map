{"version":3,"file":"modals.min.js","sources":["../../src/cases/modals.js"],"sourcesContent":["import {\n    changeStatusToComplete,\n    deleteSection\n} from \"local_digitalta/cases/main\";\nimport * as Str from \"core/str\";\nimport Modal from \"core/modal\";\nimport ModalEvents from \"core/modal_events\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalRegistry from \"core/modal_registry\";\n\nconst saveModal = class extends Modal {\n    static TYPE = 'local_digitalta/saveModal';\n    static TEMPLATE = 'local_digitalta/cases/modals/modal-save';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(saveModal.TYPE, saveModal, saveModal.TEMPLATE);\n\nconst deleteSectionModal = class extends Modal {\n    static TYPE = 'local_digitalta/deleteSectionModal';\n    static TEMPLATE = 'local_digitalta/cases/modals/modal-section-delete';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(deleteSectionModal.TYPE, deleteSectionModal, deleteSectionModal.TEMPLATE);\n\n/**\n * Display the save modal.\n */\nexport const showSaveModal = async () => {\n    const string_keys = [\n        { key: \"case:save\", component: \"local_digitalta\" },\n        { key: \"case:save:confirm\", component: \"local_digitalta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    Promise.all([strings])\n        .then(([strings]) => displaySaveModal(strings));\n};\n\n/**\n * Display the save modal.\n *\n * @param {Array} strings The strings to display.\n */\nconst displaySaveModal = async (strings) => {\n    const modal = await ModalFactory.create({\n        type: saveModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1]\n            }\n        },\n        large: false,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, (event) => {\n        event.preventDefault();\n        changeStatusToComplete();\n        modal.destroy();\n    });\n};\n\n/**\n * Display the delete section modal.\n *\n * @param {int} sectionid The section id.\n */\nexport const showDeleteSectionModal = async (sectionid) => {\n    const string_keys = [\n        { key: \"case:section:delete\", component: \"local_digitalta\" },\n        { key: \"case:section:delete:confirm\", component: \"local_digitalta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    Promise.all([strings])\n        .then(([strings]) => displayDeleteSectionModal(strings, sectionid));\n};\n\n/**\n * Display the delete section modal.\n *\n * @param {Array} strings The strings to display.\n * @param {int} sectionid The section id.\n */\nconst displayDeleteSectionModal = async (strings, sectionid) => {\n    const modal = await ModalFactory.create({\n        type: deleteSectionModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1]\n            }\n        },\n        large: false,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, (event) => {\n        event.preventDefault();\n        deleteSection(sectionid);\n        modal.destroy();\n    });\n};\n"],"names":["saveModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","register","TYPE","TEMPLATE","deleteSectionModal","async","strings","Str","get_strings","key","component","Promise","all","then","_ref","displaySaveModal","modal","ModalFactory","create","type","templateContext","title","description","large","removeOnClose","show","getRoot","on","ModalEvents","save","event","preventDefault","destroy","_ref2","displayDeleteSectionModal","sectionid"],"mappings":"ujDAUMA,UAAY,cAAcC,2BACd,4CACI,0CAClBC,+BACUA,8BACDC,2BACAC,kDAGCC,SAASL,UAAUM,KAAMN,UAAWA,UAAUO,gBAEtDC,mBAAqB,cAAcP,2BACvB,qDACI,oDAClBC,+BACUA,8BACDC,2BACAC,kDAGCC,SAASG,mBAAmBF,KAAME,mBAAoBA,mBAAmBD,iCAK1DE,gBAKnBC,QAAUC,IAAIC,YAJA,CAChB,CAAEC,IAAK,YAAaC,UAAW,mBAC/B,CAAED,IAAK,oBAAqBC,UAAW,qBAG3CC,QAAQC,IAAI,CAACN,UACRO,MAAKC,WAAER,qBAAaS,iBAAiBT,mBAQxCS,iBAAmBV,MAAAA,gBACfW,YAAcC,uBAAaC,OAAO,CACpCC,KAAMvB,UAAUM,KAChBkB,gBAAiB,CACbJ,MAAO,CACHK,MAAOf,QAAQ,GACfgB,YAAahB,QAAQ,KAG7BiB,OAAO,EACPC,eAAe,IAEnBR,MAAMS,OACQT,MAAMU,UACdC,GAAGC,sBAAYC,MAAOC,QACxBA,MAAMC,oDAENf,MAAMgB,8CASwB3B,MAAAA,kBAK5BC,QAAUC,IAAIC,YAJA,CAChB,CAAEC,IAAK,sBAAuBC,UAAW,mBACzC,CAAED,IAAK,8BAA+BC,UAAW,qBAGrDC,QAAQC,IAAI,CAACN,UACRO,MAAKoB,YAAE3B,sBAAa4B,0BAA0B5B,QAAS6B,qBAS1DD,0BAA4B7B,MAAOC,QAAS6B,mBACxCnB,YAAcC,uBAAaC,OAAO,CACpCC,KAAMf,mBAAmBF,KACzBkB,gBAAiB,CACbJ,MAAO,CACHK,MAAOf,QAAQ,GACfgB,YAAahB,QAAQ,KAG7BiB,OAAO,EACPC,eAAe,IAEnBR,MAAMS,OACQT,MAAMU,UACdC,GAAGC,sBAAYC,MAAOC,QACxBA,MAAMC,yCACQI,WACdnB,MAAMgB"}