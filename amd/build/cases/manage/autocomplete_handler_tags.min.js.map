{"version":3,"file":"autocomplete_handler_tags.min.js","sources":["../../../src/cases/manage/autocomplete_handler_tags.js"],"sourcesContent":["define(['core/ajax'], function(Ajax) {\r\n    return {\r\n        // Public variables and functions.\r\n        /**\r\n         * Process the results returned from transport (convert to value + label)\r\n         *\r\n         * @method processResults\r\n         * @param {String} selector\r\n         * @param {Array} data\r\n         * @return {Array}\r\n         */\r\n        processResults: function(selector, data) {\r\n            const tags = data.map(function(tag) {\r\n                const value = tag.id;\r\n                let label = tag.name;\r\n                if (tag.id === -1) {\r\n                    label = 'Create: ' + tag.name;\r\n                }\r\n                return {label, value};\r\n            });\r\n            return tags;\r\n        },\r\n\r\n        /**\r\n         * Fetch results based on the current query. This also renders each result from a template before returning them.\r\n         *\r\n         * @method transport\r\n         * @param {String} searchText\r\n         * @param {String} query\r\n         * @param {Function} success\r\n         * @param {Function} failure\r\n         */\r\n        transport: function(searchText, query, success, failure) {\r\n            {\r\n                Ajax.call([{\r\n                    methodname: 'local_dta_get_tags',\r\n                    args: {searchText: query},\r\n                    done: function(result) {\r\n                        if (result.length === 0) {\r\n                            success([{name: query, id: -1}]);\r\n                        } else {\r\n                            success(result);\r\n                        }\r\n                    },\r\n                    fail: failure\r\n                }]);\r\n\r\n            }\r\n        }\r\n    };\r\n});"],"names":["define","Ajax","processResults","selector","data","map","tag","value","id","label","name","transport","searchText","query","success","failure","call","methodname","args","done","result","length","fail"],"mappings":"AAAAA,0DAAO,CAAC,cAAc,SAASC,YACpB,CAUHC,eAAgB,SAASC,SAAUC,aAClBA,KAAKC,KAAI,SAASC,WACrBC,MAAQD,IAAIE,OACdC,MAAQH,IAAII,YACA,IAAZJ,IAAIE,KACJC,MAAQ,WAAaH,IAAII,MAEtB,CAACD,MAAAA,MAAOF,MAAAA,WAcvBI,UAAW,SAASC,WAAYC,MAAOC,QAASC,SAExCd,KAAKe,KAAK,CAAC,CACPC,WAAY,qBACZC,KAAM,CAACN,WAAYC,OACnBM,KAAM,SAASC,QACW,IAAlBA,OAAOC,OACPP,QAAQ,CAAC,CAACJ,KAAMG,MAAOL,IAAK,KAE5BM,QAAQM,SAGhBE,KAAMP"}