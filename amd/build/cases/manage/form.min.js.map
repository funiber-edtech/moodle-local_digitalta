{"version":3,"file":"form.min.js","sources":["../../../src/cases/manage/form.js"],"sourcesContent":["import $ from 'jquery';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {\r\n    sectionTextUpsert,\r\n    sectionTextDelete,\r\n    ourcaseEdit\r\n} from 'local_dta/repositories/ourcases_repository';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport {get_string} from 'core/str';\r\nimport setEventListeners from './listeners';\r\nimport {createTinyMCE,\r\n    getTinyMCEContent\r\n} from 'local_dta/tiny/manage';\r\nimport {autocompleteTags} from \"local_dta/tags/autocomplete\";\r\n\r\nlet sectionTextModal;\r\nlet urlView = null;\r\n\r\n/**\r\n * Add a new text section to the page.\r\n * @return {void}\r\n */\r\nexport function addTextSection() {\r\n    Templates.render('local_dta/cases/section-text-edit', {\r\n        id: new Date().getTime(),\r\n        description: null,\r\n        exist: true\r\n    }).then((html) => {\r\n        $('#sections-body').append(html);\r\n        createTinyMCE($('.card-body:has(textarea)').last().find('textarea').attr('id'));\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n\r\n/**\r\n * Change the section to edit mode.\r\n * @param {boolean} toView - Whether to change to view mode.\r\n * @param {number} id - The id of the section to change.\r\n * @return {void}\r\n */\r\nexport function changeSectionToEdit(toView = false, id) {\r\n    return new Promise((resolve, reject) => {\r\n        const description = toView ? $(`#content_${id}`).html() : $(`#content_${id}`).val();\r\n        const template = toView ? 'local_dta/cases/section-text-edit' : 'local_dta/cases/section-text-view';\r\n        Templates.render(template, {id, description})\r\n            .then((html) => {\r\n                $(`#section_${id}`).replaceWith(html);\r\n                return resolve();\r\n            })\r\n            .fail((error) => {\r\n                reject(error);\r\n                Notification.exception(error);\r\n            });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Change the section to edit mode.\r\n * @param {number} id - The id of the section to change.\r\n * @param {number} toId - The id of the section to change to.\r\n * @return {void}\r\n */\r\nfunction changeSectionToNewId(id, toId) {\r\n    const description = $(`#content_${id}`).val();\r\n    Templates.render(\"local_dta/cases/section-text-view\",\r\n        {id: toId, description, exist: true}).then((html) => {\r\n           return $(`#section_${id}`).replaceWith(html);\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n\r\n/**\r\n * Set event listeners for the module.\r\n * @param {number} id - The id of the section to remove.\r\n * @return {void}\r\n *\r\n */\r\nexport function upsertSection(id) {\r\n    const sectionid = $(`#not_exist_${id}`).val() ? null : $(`#sectionid_${id}`).val();\r\n    const ourcaseid = $('#ourcases-id').val();\r\n    const title = null;\r\n    const text = $(`#content_${id}`).val();\r\n    const sequence = -1;\r\n\r\n    return sectionTextUpsert({ourcaseid, sectionid, title, text, sequence})\r\n        .then((data) => {\r\n            if (data && data.result) {\r\n                changeSectionToNewId(id, data.sectionid);\r\n                return data;\r\n            } else {\r\n                throw new Error('No se pudo realizar la actualización de la sección.');\r\n            }\r\n        })\r\n        .fail(() => {\r\n            throw new Error('Hubo un error al realizar la solicitud: ');\r\n        });\r\n}\r\n\r\n/**\r\n * Set event listeners for the module.\r\n * @return {Promise<boolean>} - Resolves to true if the operation was successful, otherwise resolves to false.\r\n */\r\nfunction upsertHeaderSection() {\r\n    return new Promise((resolve, reject) => {\r\n        const sectionid = $('#section-header-id').val();\r\n        const ourcaseid = $('#ourcases-id').val();\r\n        const title = $('#section-header-title').val();\r\n        const text = getTinyMCEContent('section-header-description');\r\n        const sequence = 0;\r\n\r\n        sectionTextUpsert({ourcaseid, sectionid, title, text, sequence})\r\n            .then((data) => {\r\n                if (data && data.result) {\r\n                    return resolve(true);\r\n                } else {\r\n                    return resolve(false);\r\n                }\r\n            })\r\n            .fail((error) => {\r\n                reject(error);\r\n                Notification.exception(error);\r\n            });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Remove a section from the page.\r\n * @param {number} sectionid - The id of the section to remove.\r\n * @return {void}\r\n */\r\nexport function removeSection(sectionid) {\r\n    if ($(`#not_exist_${sectionid}`).val()) {\r\n        if (sectionid) {\r\n            $(`#section_${sectionid}`).remove();\r\n        }\r\n    } else {\r\n        changeSectionToEdit(false, sectionid);\r\n    }\r\n}\r\n\r\n/**\r\n * Show the delete section modal\r\n * @param {number} sectionid - The id of the section to remove.\r\n * @return {void}\r\n */\r\nexport async function showDeleteSectionModal(sectionid) {\r\n    sectionTextModal = await ModalFactory.create({\r\n        title: get_string(\"ourcases_section_text_delete_modal_title\", \"local_dta\"),\r\n        body: Templates.render('local_dta/cases/manage/section-text-modal', {modalDeleteId: sectionid}),\r\n    });\r\n    sectionTextModal.show().then(() => {\r\n        $(\"#modal_delete_id\").val(sectionid);\r\n        return;\r\n    }).fail(Notification.exception);\r\n\r\n}\r\n\r\n/**\r\n * Show save case modal\r\n * @return {void}\r\n */\r\nexport async function showSaveCase() {\r\n    const saveModal = await ModalFactory.create({\r\n        title: get_string(\"ourcases_modal_save_title\", \"local_dta\"),\r\n        body: Templates.render('local_dta/cases/manage/save-modal', {})\r\n    });\r\n    await saveModal.show();\r\n}\r\n\r\n\r\n/**\r\n * Delete text section\r\n * @return {void}\r\n */\r\nexport function deleteSection() {\r\n    const sectionid = $(\"#modal_delete_id\").val();\r\n    const ourcaseid = $('#ourcases-id').val();\r\n\r\n    sectionTextDelete({ourcaseid, sectionid}).then((data) => {\r\n        if (data.result) {\r\n            sectionTextModal.hide();\r\n            sectionTextModal = null;\r\n            $(`#section_${sectionid}`).remove();\r\n        }\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n/**\r\n * Edit a case.\r\n * @return {void}\r\n */\r\nexport async function changeStatusToComplete() {\r\n    const ourcaseid = $('#ourcases-id').val();\r\n    const status = 1;\r\n    const tags = $(\"#autocomplete_tags\").val();\r\n    await upsertHeaderSection();\r\n    ourcaseEdit({ourcaseid, status, tags}).then((data) => {\r\n        if (data.result) {\r\n            window.location.href = urlView;\r\n        }\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n/**\r\n * Initialize the module.\r\n * @param {string} dataUrlView - The url to redirect after save the case.\r\n * @return {void}\r\n */\r\nexport const init = async(dataUrlView) => {\r\n    setEventListeners();\r\n    autocompleteTags(\"#autocomplete_tags\");\r\n    urlView = dataUrlView;\r\n    createTinyMCE('section-header-description');\r\n};"],"names":["sectionTextModal","render","id","Date","getTime","description","exist","then","html","append","last","find","attr","fail","Notification","exception","ourcaseid","val","tags","Promise","resolve","reject","sectionid","title","text","sequence","data","result","error","status","window","location","href","urlView","hide","remove","changeSectionToEdit","ModalFactory","create","body","Templates","modalDeleteId","show","saveModal","toId","replaceWith","changeSectionToNewId","Error","toView","template","async","dataUrlView"],"mappings":"qcAgBIA,+HAQUC,OAAO,oCAAqC,CAClDC,IAAI,IAAIC,MAAOC,UACfC,YAAa,KACbC,OAAO,IACRC,MAAMC,2BACH,kBAAkBC,OAAOD,iCACb,mBAAE,4BAA4BE,OAAOC,KAAK,YAAYC,KAAK,UAE1EC,KAAKC,sBAAaC,oHAqKfC,WAAY,mBAAE,gBAAgBC,MAE9BC,MAAO,mBAAE,sBAAsBD,YA7F9B,IAAIE,SAAQ,CAACC,QAASC,gBACnBC,WAAY,mBAAE,sBAAsBL,MACpCD,WAAY,mBAAE,gBAAgBC,MAC9BM,OAAQ,mBAAE,yBAAyBN,MACnCO,MAAO,6BAAkB,8BACzBC,SAAW,6CAEC,CAACT,UAAAA,UAAWM,UAAAA,UAAWC,MAAAA,MAAOC,KAAAA,KAAMC,SAAAA,WACjDlB,MAAMmB,MACCA,MAAQA,KAAKC,OACNP,SAAQ,GAERA,SAAQ,KAGtBP,MAAMe,QACHP,OAAOO,6BACMb,UAAUa,kDA8EvB,CAACZ,UAAAA,UAAWa,OAHT,EAGiBX,KAAAA,OAAOX,MAAMmB,OACrCA,KAAKC,SACLG,OAAOC,SAASC,KAAOC,YAG5BpB,KAAKC,sBAAaC,oDA3BfO,WAAY,mBAAE,oBAAoBL,MAClCD,WAAY,mBAAE,gBAAgBC,iDAElB,CAACD,UAAAA,UAAWM,UAAAA,YAAYf,MAAMmB,OACxCA,KAAKC,SACL3B,iBAAiBkC,OACjBlC,iBAAmB,4CACLsB,YAAaa,aAGhCtB,KAAKC,sBAAaC,iEAvDKO,YACtB,wCAAgBA,YAAaL,MACzBK,kDACcA,YAAaa,SAG/BC,qBAAoB,EAAOd,2DASUA,WACzCtB,uBAAyBqC,uBAAaC,OAAO,CACzCf,OAAO,mBAAW,2CAA4C,aAC9DgB,KAAMC,mBAAUvC,OAAO,4CAA6C,CAACwC,cAAenB,cAExFtB,iBAAiB0C,OAAOnC,MAAK,yBACvB,oBAAoBU,IAAIK,cAE3BT,KAAKC,sBAAaC,yDASf4B,gBAAkBN,uBAAaC,OAAO,CACxCf,OAAO,mBAAW,4BAA6B,aAC/CgB,KAAMC,mBAAUvC,OAAO,oCAAqC,YAE1D0C,UAAUD,wCA1FUxC,UACpBoB,WAAY,wCAAgBpB,KAAMe,MAAQ,MAAO,wCAAgBf,KAAMe,MACvED,WAAY,mBAAE,gBAAgBC,MAE9BO,MAAO,sCAActB,KAAMe,aAG1B,0CAAkB,CAACD,UAAAA,UAAWM,UAAAA,UAAWC,MAJlC,KAIyCC,KAAAA,KAAMC,UAF3C,IAGblB,MAAMmB,UACCA,MAAQA,KAAKC,uBAxBCzB,GAAI0C,YACxBvC,aAAc,sCAAcH,KAAMe,yBAC9BhB,OAAO,oCACb,CAACC,GAAI0C,KAAMvC,YAAAA,YAAaC,OAAO,IAAOC,MAAMC,OAClC,sCAAcN,KAAM2C,YAAYrC,QAC3CK,KAAKC,sBAAaC,WAoBT+B,CAAqB5C,GAAIwB,KAAKJ,WACvBI,WAED,IAAIqB,MAAM,0DAGvBlC,MAAK,WACI,IAAIkC,MAAM,kSAhFxBd,QAAU,cAyBEG,0BAAoBY,+DAAgB9C,iDACzC,IAAIiB,SAAQ,CAACC,QAASC,gBACnBhB,YAAc2C,QAAS,sCAAc9C,KAAMM,QAAS,sCAAcN,KAAMe,MACxEgC,SAAWD,OAAS,oCAAsC,uDACtD/C,OAAOgD,SAAU,CAAC/C,GAAAA,GAAIG,YAAAA,cAC3BE,MAAMC,8CACWN,KAAM2C,YAAYrC,MACzBY,aAEVP,MAAMe,QACHP,OAAOO,6BACMb,UAAUa,2BAiKnBsB,MAAAA,0EAEC,sBACjBjB,QAAUkB,sCACI"}