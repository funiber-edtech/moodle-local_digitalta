{"version":3,"file":"form.min.js","sources":["../../../src/cases/manage/form.js"],"sourcesContent":["import $ from 'jquery';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {\n    sectionTextUpsert,\n    sectionTextDelete,\n    caseEdit\n} from 'local_dta/repositories/cases_repository';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string} from 'core/str';\nimport setEventListeners from './listeners';\nimport {createTinyMCE,\n    getTinyMCEContent\n} from 'local_dta/tiny/manage';\nimport {autocompleteTags} from \"local_dta/tags/autocomplete\";\n\nlet sectionTextModal;\nlet urlView = null;\n\n/**\n * Add a new text section to the page.\n * @return {void}\n */\nexport function addTextSection() {\n    Templates.render('local_dta/cases/manage/section-text-edit', {\n        id: new Date().getTime(),\n        description: null,\n        exist: true\n    }).then((html) => {\n        $('#sections-body').append(html);\n        createTinyMCE($('.card-body:has(textarea)').last().find('textarea').attr('id'));\n        return;\n    }).fail(Notification.exception);\n}\n\n\n/**\n * Change the section to edit mode.\n * @param {boolean} toView - Whether to change to view mode.\n * @param {number} id - The id of the section to change.\n * @return {void}\n */\nexport function changeSectionToEdit(toView = false, id) {\n    return new Promise((resolve, reject) => {\n        const description = toView ? $(`#content_${id}`).html() : $(`#content_${id}`).val();\n        const template = toView ? 'local_dta/cases/manage/section-text-edit' : 'local_dta/cases/manage/section-text-view';\n        Templates.render(template, {id, description})\n            .then((html) => {\n                $(`#section_${id}`).replaceWith(html);\n                return resolve();\n            })\n            .fail((error) => {\n                reject(error);\n                Notification.exception(error);\n            });\n    });\n}\n\n\n/**\n * Change the section to edit mode.\n * @param {number} id - The id of the section to change.\n * @param {number} toId - The id of the section to change to.\n * @return {void}\n */\nfunction changeSectionToNewId(id, toId) {\n    const description = $(`#content_${id}`).val();\n    Templates.render(\"local_dta/cases/manage/section-text-view\",\n        {id: toId, description, exist: true}).then((html) => {\n           return $(`#section_${id}`).replaceWith(html);\n    }).fail(Notification.exception);\n}\n\n\n/**\n * Set event listeners for the module.\n * @param {number} id - The id of the section to remove.\n * @return {void}\n *\n */\nexport function upsertSection(id) {\n    const sectionid = $(`#not_exist_${id}`).val() ? null : $(`#sectionid_${id}`).val();\n    const caseid = $('#cases-id').val();\n    const title = null;\n    const text = $(`#content_${id}`).val();\n    const sequence = -1;\n\n    return sectionTextUpsert({caseid, sectionid, title, text, sequence})\n        .then((data) => {\n            if (data && data.result) {\n                changeSectionToNewId(id, data.sectionid);\n                return data;\n            } else {\n                throw new Error('No se pudo realizar la actualización de la sección.');\n            }\n        })\n        .fail(() => {\n            throw new Error('Hubo un error al realizar la solicitud: ');\n        });\n}\n\n/**\n * Set event listeners for the module.\n * @return {Promise<boolean>} - Resolves to true if the operation was successful, otherwise resolves to false.\n */\nfunction upsertHeaderSection() {\n    return new Promise((resolve, reject) => {\n        const sectionid = $('#section-header-id').val();\n        const caseid = $('#cases-id').val();\n        const title = $('#section-header-title').val();\n        const text = getTinyMCEContent('section-header-description');\n        const sequence = 0;\n\n        sectionTextUpsert({caseid, sectionid, title, text, sequence})\n            .then((data) => {\n                if (data && data.result) {\n                    return resolve(true);\n                } else {\n                    return resolve(false);\n                }\n            })\n            .fail((error) => {\n                reject(error);\n                Notification.exception(error);\n            });\n    });\n}\n\n\n/**\n * Remove a section from the page.\n * @param {number} sectionid - The id of the section to remove.\n * @return {void}\n */\nexport function removeSection(sectionid) {\n    if ($(`#not_exist_${sectionid}`).val()) {\n        if (sectionid) {\n            $(`#section_${sectionid}`).remove();\n        }\n    } else {\n        changeSectionToEdit(false, sectionid);\n    }\n}\n\n/**\n * Show the delete section modal\n * @param {number} sectionid - The id of the section to remove.\n * @return {void}\n */\nexport async function showDeleteSectionModal(sectionid) {\n    sectionTextModal = await ModalFactory.create({\n        title: get_string(\"cases_section_text_delete_modal_title\", \"local_dta\"),\n        body: Templates.render('local_dta/cases/manage/section-text-modal', {modalDeleteId: sectionid}),\n    });\n    sectionTextModal.show().then(() => {\n        $(\"#modal_delete_id\").val(sectionid);\n        return;\n    }).fail(Notification.exception);\n\n}\n\n/**\n * Show save case modal\n * @return {void}\n */\nexport async function showSaveCase() {\n    const saveModal = await ModalFactory.create({\n        title: get_string(\"cases_modal_save_title\", \"local_dta\"),\n        body: Templates.render('local_dta/cases/manage/save-modal', {})\n    });\n    await saveModal.show();\n}\n\n\n/**\n * Delete text section\n * @return {void}\n */\nexport function deleteSection() {\n    const sectionid = $(\"#modal_delete_id\").val();\n    const caseid = $('#cases-id').val();\n\n    sectionTextDelete({caseid, sectionid}).then((data) => {\n        if (data.result) {\n            sectionTextModal.hide();\n            sectionTextModal = null;\n            $(`#section_${sectionid}`).remove();\n        }\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Edit a case.\n * @return {void}\n */\nexport async function changeStatusToComplete() {\n    const caseid = $('#cases-id').val();\n    const status = 1;\n    const tags = $(\"#autocomplete_tags\").val();\n    await upsertHeaderSection();\n    caseEdit({caseid, status, tags}).then((data) => {\n        if (data.result) {\n            window.location.href = urlView + caseid;\n        }\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Initialize the module.\n * @param {string} dataUrlView - The url to redirect after save the case.\n * @return {void}\n */\nexport const init = async(dataUrlView) => {\n    setEventListeners();\n    autocompleteTags(\"#autocomplete_tags\");\n    urlView = dataUrlView;\n    createTinyMCE('section-header-description');\n};"],"names":["sectionTextModal","render","id","Date","getTime","description","exist","then","html","append","last","find","attr","fail","Notification","exception","caseid","val","tags","Promise","resolve","reject","sectionid","title","text","sequence","data","result","error","status","window","location","href","urlView","hide","remove","changeSectionToEdit","ModalFactory","create","body","Templates","modalDeleteId","show","saveModal","toId","replaceWith","changeSectionToNewId","Error","toView","template","async","dataUrlView"],"mappings":"+bAgBIA,+HAQUC,OAAO,2CAA4C,CACzDC,IAAI,IAAIC,MAAOC,UACfC,YAAa,KACbC,OAAO,IACRC,MAAMC,2BACH,kBAAkBC,OAAOD,iCACb,mBAAE,4BAA4BE,OAAOC,KAAK,YAAYC,KAAK,UAE1EC,KAAKC,sBAAaC,oHAqKfC,QAAS,mBAAE,aAAaC,MAExBC,MAAO,mBAAE,sBAAsBD,YA7F9B,IAAIE,SAAQ,CAACC,QAASC,gBACnBC,WAAY,mBAAE,sBAAsBL,MACpCD,QAAS,mBAAE,aAAaC,MACxBM,OAAQ,mBAAE,yBAAyBN,MACnCO,MAAO,6BAAkB,8BACzBC,SAAW,0CAEC,CAACT,OAAAA,OAAQM,UAAAA,UAAWC,MAAAA,MAAOC,KAAAA,KAAMC,SAAAA,WAC9ClB,MAAMmB,MACCA,MAAQA,KAAKC,OACNP,SAAQ,GAERA,SAAQ,KAGtBP,MAAMe,QACHP,OAAOO,6BACMb,UAAUa,4CA8E1B,CAACZ,OAAAA,OAAQa,OAHH,EAGWX,KAAAA,OAAOX,MAAMmB,OAC/BA,KAAKC,SACLG,OAAOC,SAASC,KAAOC,QAAUjB,WAGtCH,KAAKC,sBAAaC,oDA3BfO,WAAY,mBAAE,oBAAoBL,MAClCD,QAAS,mBAAE,aAAaC,8CAEZ,CAACD,OAAAA,OAAQM,UAAAA,YAAYf,MAAMmB,OACrCA,KAAKC,SACL3B,iBAAiBkC,OACjBlC,iBAAmB,4CACLsB,YAAaa,aAGhCtB,KAAKC,sBAAaC,iEAvDKO,YACtB,wCAAgBA,YAAaL,MACzBK,kDACcA,YAAaa,SAG/BC,qBAAoB,EAAOd,2DASUA,WACzCtB,uBAAyBqC,uBAAaC,OAAO,CACzCf,OAAO,mBAAW,wCAAyC,aAC3DgB,KAAMC,mBAAUvC,OAAO,4CAA6C,CAACwC,cAAenB,cAExFtB,iBAAiB0C,OAAOnC,MAAK,yBACvB,oBAAoBU,IAAIK,cAE3BT,KAAKC,sBAAaC,yDASf4B,gBAAkBN,uBAAaC,OAAO,CACxCf,OAAO,mBAAW,yBAA0B,aAC5CgB,KAAMC,mBAAUvC,OAAO,oCAAqC,YAE1D0C,UAAUD,wCA1FUxC,UACpBoB,WAAY,wCAAgBpB,KAAMe,MAAQ,MAAO,wCAAgBf,KAAMe,MACvED,QAAS,mBAAE,aAAaC,MAExBO,MAAO,sCAActB,KAAMe,aAG1B,uCAAkB,CAACD,OAAAA,OAAQM,UAAAA,UAAWC,MAJ/B,KAIsCC,KAAAA,KAAMC,UAFxC,IAGblB,MAAMmB,UACCA,MAAQA,KAAKC,uBAxBCzB,GAAI0C,YACxBvC,aAAc,sCAAcH,KAAMe,yBAC9BhB,OAAO,2CACb,CAACC,GAAI0C,KAAMvC,YAAAA,YAAaC,OAAO,IAAOC,MAAMC,OAClC,sCAAcN,KAAM2C,YAAYrC,QAC3CK,KAAKC,sBAAaC,WAoBT+B,CAAqB5C,GAAIwB,KAAKJ,WACvBI,WAED,IAAIqB,MAAM,0DAGvBlC,MAAK,WACI,IAAIkC,MAAM,kSAhFxBd,QAAU,cAyBEG,0BAAoBY,+DAAgB9C,iDACzC,IAAIiB,SAAQ,CAACC,QAASC,gBACnBhB,YAAc2C,QAAS,sCAAc9C,KAAMM,QAAS,sCAAcN,KAAMe,MACxEgC,SAAWD,OAAS,2CAA6C,8DAC7D/C,OAAOgD,SAAU,CAAC/C,GAAAA,GAAIG,YAAAA,cAC3BE,MAAMC,8CACWN,KAAM2C,YAAYrC,MACzBY,aAEVP,MAAMe,QACHP,OAAOO,6BACMb,UAAUa,2BAiKnBsB,MAAAA,0EAEC,sBACjBjB,QAAUkB,sCACI"}