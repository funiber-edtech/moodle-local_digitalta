{"version":3,"file":"form.min.js","sources":["../../../src/cases/manage/form.js"],"sourcesContent":["import $ from 'jquery';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {\r\n    sectionTextUpsert,\r\n    sectionTextDelete,\r\n    // ourcaseEdit\r\n} from 'local_dta/repositories/ourcases_repository';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport {get_string} from 'core/str';\r\nimport setEventListeners from './listeners';\r\nimport {createTinyMCE} from 'local_dta/tiny/manage';\r\nimport {autocompleteTags} from \"local_dta/tags/autocomplete\";\r\n\r\nlet sectionTextModal;\r\n// let urlView = null;\r\n\r\n/**\r\n * Add a new text section to the page.\r\n * @return {void}\r\n */\r\nexport function addTextSection() {\r\n    Templates.render('local_dta/cases/section-text-edit', {\r\n        id: new Date().getTime(),\r\n        description: null,\r\n        exist: true\r\n    }).then((html) => {\r\n        $('#sections-body').append(html);\r\n        createTinyMCE($('.card-body:has(textarea)').last().find('textarea').attr('id'));\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n\r\n/**\r\n * Change the section to edit mode.\r\n * @param {boolean} toView - Whether to change to view mode.\r\n * @param {number} id - The id of the section to change.\r\n * @return {void}\r\n */\r\nexport function changeSectionToEdit(toView = false, id) {\r\n    return new Promise((resolve, reject) => {\r\n        const description = toView ? $(`#content_${id}`).html() : $(`#content_${id}`).val();\r\n        const template = toView ? 'local_dta/cases/section-text-edit' : 'local_dta/cases/section-text-view';\r\n        Templates.render(template, { id, description })\r\n            .then((html) => {\r\n                $(`#section_${id}`).replaceWith(html);\r\n                return resolve();\r\n            })\r\n            .fail((error) => {\r\n                reject(error);\r\n                Notification.exception(error);\r\n            });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Change the section to edit mode.\r\n * @param {number} id - The id of the section to change.\r\n * @param {number} toId - The id of the section to change to.\r\n * @return {void}\r\n */\r\nfunction changeSectionToNewId(id, toId) {\r\n    const description = $(`#content_${id}`).val();\r\n    Templates.render(\"local_dta/cases/section-text-view\",\r\n        {id: toId, description, exist: true}).then((html) => {\r\n           return $(`#section_${id}`).replaceWith(html);\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n\r\n/**\r\n * Set event listeners for the module.\r\n * @param {number} id - The id of the section to remove.\r\n * @return {void}\r\n *\r\n */\r\nexport function upsertSection(id) {\r\n    const sectionid = $(`#not_exist_${id}`).val() ? null : $(`#sectionid_${id}`).val();\r\n    const ourcaseid = $('#ourcases-id').val();\r\n    const title = null;\r\n    const text = $(`#content_${id}`).val();\r\n    const sequence = -1;\r\n\r\n    return sectionTextUpsert({ourcaseid, sectionid, title, text, sequence})\r\n        .then((data) => {\r\n            if (data && data.result) {\r\n                changeSectionToNewId(id, data.sectionid);\r\n                return data;\r\n            } else {\r\n                throw new Error('No se pudo realizar la actualización de la sección.');\r\n            }\r\n        })\r\n        .fail(() => {\r\n            throw new Error('Hubo un error al realizar la solicitud: ');\r\n        });\r\n}\r\n\r\n\r\n/**\r\n * Remove a section from the page.\r\n * @param {number} sectionid - The id of the section to remove.\r\n * @return {void}\r\n */\r\nexport function removeSection(sectionid) {\r\n    if ($(`#not_exist_${sectionid}`).val()) {\r\n        if (sectionid) {\r\n            $(`#section_${sectionid}`).remove();\r\n        }\r\n    } else {\r\n        changeSectionToEdit(false, sectionid);\r\n    }\r\n}\r\n\r\n/**\r\n * Show the delete section modal\r\n * @param {number} sectionid - The id of the section to remove.\r\n * @return {void}\r\n */\r\nexport async function showDeleteSectionModal(sectionid) {\r\n    sectionTextModal = await ModalFactory.create({\r\n        title: get_string(\"ourcases_section_text_delete_modal_title\", \"local_dta\"),\r\n        body: Templates.render('local_dta/cases/manage/section-text-modal', {modalDeleteId: sectionid}),\r\n    });\r\n    sectionTextModal.show().then(() => {\r\n        $(\"#modal_delete_id\").val(sectionid);\r\n        return;\r\n    }).fail(Notification.exception);\r\n\r\n}\r\n\r\n/**\r\n * Show save case modal\r\n * @return {void}\r\n */\r\n// async function showSaveCase() {\r\n//     const button = $('#header-edit-button')[0];\r\n//     const button2 = $('#section-edit-button')[0];\r\n//     const saveModal = await ModalFactory.create({\r\n//         title: get_string(\"ourcases_modal_save_title\", \"local_dta\"),\r\n//         body: Templates.render('local_dta/cases/manage-save-modal', {\r\n//             havePendingChanges: (button || button2) ? true : false,\r\n//         }),\r\n//     });\r\n//     saveModal.show();\r\n// }\r\n\r\n\r\n/**\r\n * Delete text section\r\n * @return {void}\r\n */\r\nexport function deleteSection() {\r\n    const sectionid = $(\"#modal_delete_id\").val();\r\n    const ourcaseid = $('#ourcases-id').val();\r\n\r\n    sectionTextDelete({ourcaseid, sectionid}).then((data) => {\r\n        if (data.result) {\r\n            sectionTextModal.hide();\r\n            sectionTextModal = null;\r\n            $(`#section_${sectionid}`).remove();\r\n        }\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n/**\r\n * Edit a case.\r\n * @return {void}\r\n */\r\n// function changeStatusToComplete() {\r\n//     const ourcaseid = $('#ourcases-id').val();\r\n//     const status = 1;\r\n//     const args = {ourcaseid, status};\r\n\r\n//     ourcaseEdit(args).then((data) => {\r\n//         if (data.result) {\r\n//             window.location.href = urlView;\r\n//         }\r\n//         return;\r\n//     }).fail(Notification.exception);\r\n// }\r\n\r\n/**\r\n * Initialize the module.\r\n * @return {void}\r\n */\r\nexport const init = async() => {\r\n    setEventListeners();\r\n    autocompleteTags();\r\n    // urlView = dataUrlView;\r\n    createTinyMCE('section-header-description');\r\n};"],"names":["sectionTextModal","changeSectionToEdit","toView","id","Promise","resolve","reject","description","html","val","template","render","then","replaceWith","fail","error","exception","Date","getTime","exist","append","last","find","attr","Notification","sectionid","ourcaseid","data","result","hide","remove","ModalFactory","create","title","body","Templates","modalDeleteId","show","text","sequence","toId","changeSectionToNewId","Error","async"],"mappings":"qcAcIA,0BA0BYC,0BAAoBC,+DAAgBC,iDACzC,IAAIC,SAAQ,CAACC,QAASC,gBACnBC,YAAcL,QAAS,sCAAcC,KAAMK,QAAS,sCAAcL,KAAMM,MACxEC,SAAWR,OAAS,oCAAsC,uDACtDS,OAAOD,SAAU,CAAEP,GAAAA,GAAII,YAAAA,cAC5BK,MAAMJ,8CACWL,KAAMU,YAAYL,MACzBH,aAEVS,MAAMC,QACHT,OAAOS,6BACMC,UAAUD,2HA7BzBJ,OAAO,oCAAqC,CAClDR,IAAI,IAAIc,MAAOC,UACfX,YAAa,KACbY,OAAO,IACRP,MAAMJ,2BACH,kBAAkBY,OAAOZ,iCACb,mBAAE,4BAA4Ba,OAAOC,KAAK,YAAYC,KAAK,UAE1ET,KAAKU,sBAAaR,qGA4HfS,WAAY,mBAAE,oBAAoBhB,MAClCiB,WAAY,mBAAE,gBAAgBjB,iDAElB,CAACiB,UAAAA,UAAWD,UAAAA,YAAYb,MAAMe,OACxCA,KAAKC,SACL5B,iBAAiB6B,OACjB7B,iBAAmB,4CACLyB,YAAaK,aAGhChB,KAAKU,sBAAaR,iEA3DKS,YACtB,wCAAgBA,YAAahB,MACzBgB,kDACcA,YAAaK,SAG/B7B,qBAAoB,EAAOwB,2DASUA,WACzCzB,uBAAyB+B,uBAAaC,OAAO,CACzCC,OAAO,mBAAW,2CAA4C,aAC9DC,KAAMC,mBAAUxB,OAAO,4CAA6C,CAACyB,cAAeX,cAExFzB,iBAAiBqC,OAAOzB,MAAK,yBACvB,oBAAoBH,IAAIgB,cAE3BX,KAAKU,sBAAaR,4CAlDKb,UACpBsB,WAAY,wCAAgBtB,KAAMM,MAAQ,MAAO,wCAAgBN,KAAMM,MACvEiB,WAAY,mBAAE,gBAAgBjB,MAE9B6B,MAAO,sCAAcnC,KAAMM,aAG1B,0CAAkB,CAACiB,UAAAA,UAAWD,UAAAA,UAAWQ,MAJlC,KAIyCK,KAAAA,KAAMC,UAF3C,IAGb3B,MAAMe,UACCA,MAAQA,KAAKC,uBAxBCzB,GAAIqC,YACxBjC,aAAc,sCAAcJ,KAAMM,yBAC9BE,OAAO,oCACb,CAACR,GAAIqC,KAAMjC,YAAAA,YAAaY,OAAO,IAAOP,MAAMJ,OAClC,sCAAcL,KAAMU,YAAYL,QAC3CM,KAAKU,sBAAaR,WAoBTyB,CAAqBtC,GAAIwB,KAAKF,WACvBE,WAED,IAAIe,MAAM,0DAGvB5B,MAAK,WACI,IAAI4B,MAAM,4SA6FRC,kGAIF"}