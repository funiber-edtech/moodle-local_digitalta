{"version":3,"file":"main.min.js","sources":["../../src/cases/main.js"],"sourcesContent":["import $ from 'jquery';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {\n    casesEdit\n} from 'local_digitalta/repositories/cases_repository';\nimport {\n    sectionsUpsert,\n    sectionsDelete\n} from 'local_digitalta/repositories/sections_repository';\nimport setEventListeners from 'local_digitalta/cases/listeners';\nimport {\n    createTinyMCE,\n    getTinyMCEContent,\n    removeTinyMCEFromArea\n} from 'local_digitalta/tiny/manage';\nimport {\n    autocompleteTags\n} from \"local_digitalta/tags/autocomplete\";\nimport {\n    autocompleteThemes\n} from \"local_digitalta/themes/autocomplete\";\nimport SELECTORS from \"local_digitalta/cases/selectors\";\n\nlet urlView = null;\n\n/**\n * Add a new section to the page\n *\n * @param {number} caseid The id of the case to add the section to\n * @param {string} typename A string representing the type of section to add\n */\nexport const addSection = (caseid, typename) => {\n    const formData = {\n        id: null,\n        component: 'case',\n        componentinstance: caseid,\n        groupid: null,\n        groupname: 'General',\n        sequence: null,\n        type: null,\n        typename: typename,\n        title: null,\n        content: null\n    };\n    sectionsUpsert(formData).then((data) => {\n        Templates.render('local_digitalta/cases/manage/manage-section-text-edit', {\n            id: data.sectionid,\n            title: null,\n            content: null\n        }).then((html) => {\n            $(SELECTORS.SECTIONS.sections).append(html);\n            createTinyMCE(`content_${data.sectionid}`);\n        }).fail(Notification.exception);\n    }).fail(Notification.exception);\n};\n\n/**\n * Switches the section to view or edit mode\n *\n * @param {number} sectionid The id of the section being switched\n * @param {boolean} toEdit Whether to change to edit mode or not\n * @param {string} title The title of the section to display\n * @param {string} content The content of the section to display\n */\nexport const switchSectionEdition = (sectionid, toEdit = false, title = null, content = null) => {\n    return new Promise((resolve, reject) => {\n        const template = toEdit\n            ? 'local_digitalta/cases/manage/manage-section-text-edit'\n            : 'local_digitalta/cases/manage/manage-section-text-view';\n        Templates.render(template, {id: sectionid, title: title, content: content})\n            .then((html) => {\n                if (!toEdit) {\n                    removeTinyMCEFromArea(`content_${sectionid}`);\n                }\n                $(`#section_${sectionid}`).replaceWith(html);\n                if (toEdit) {\n                    createTinyMCE(`content_${sectionid}`);\n                }\n                return resolve();\n            })\n            .fail((error) => {\n                reject(error);\n                Notification.exception(error);\n            });\n    });\n};\n\n/**\n * Save the section data\n *\n * @param {number} caseid The id to which the section belongs\n * @param {number} sectionid The id of the section to save\n */\nexport const saveSection = (caseid, sectionid) => {\n    const formData = {\n        id: sectionid,\n        component: 'case',\n        componentinstance: caseid,\n        groupid: null,\n        groupname: 'General',\n        sequence: null,\n        type: null,\n        typename: 'text',\n        title: $(`#title_${sectionid}`).val(),\n        content: getTinyMCEContent(`content_${sectionid}`)\n    };\n    sectionsUpsert(formData).then((data) => {\n        switchSectionEdition(data.sectionid, false, formData.title, formData.content);\n    }).fail(Notification.exception);\n};\n\n/**\n * Deletes a section\n *\n * @param {number} sectionid The id of the section to delete.\n */\nexport const deleteSection = (sectionid) => {\n    sectionsDelete({id: sectionid}).then((data) => {\n        if (data.result) {\n            $(`#section_${sectionid}`).remove();\n        }\n        return;\n    }).fail(Notification.exception);\n};\n\n/**\n * Change the status of the case to complete.\n */\nexport const changeStatusToComplete = async () => {\n    const form = document.querySelector('#case-manage-form');\n    const formData = {\n        id: form.querySelector('input[name=\"case-id\"]').value,\n        title: form.querySelector('input[name=\"case-manage-title\"]').value,\n        description: getTinyMCEContent('case-manage-description'),\n        lang: form.querySelector('select[name=\"case-manage-lang\"]').value,\n        status: parseInt(1),\n        themes:  Array.from(\n            form.querySelectorAll('select[name=\"case-manage-themes\"] option:checked'),\n            option => option.value),\n        tags: Array.from(\n            form.querySelectorAll('select[name=\"case-manage-tags\"] option:checked'),\n            option => option.value)\n    };\n    try {\n        const response = await casesEdit(formData);\n        Notification.addNotification({\n            message: 'Case updated successfully',\n            type: 'success'\n        });\n        location.href = urlView + response.caseid;\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Validate the form data.\n *\n * @return {boolean} True if the form is valid.\n */\nexport const validateFormData = () => {\n    // Declare error as false\n    let error = false;\n    // Hide all error messages\n    $([SELECTORS.SECTIONS.formDataError,\n        SELECTORS.SECTIONS.errorMissingRequiredFields,\n        SELECTORS.SECTIONS.errorEditingSections\n    ].join(', ')).hide();\n    // Get the form\n    const form = document.getElementById(SELECTORS.SECTIONS.form.replace('#', ''));\n    // Validate required fields\n    if (!validateManageRequiredFields(form)) {\n        $(SELECTORS.SECTIONS.errorMissingRequiredFields).show();\n        error = true;\n    }\n    // Validate editing sections\n    if (!validateManageEditingSections()) {\n        $(SELECTORS.SECTIONS.errorEditingSections).show();\n        error = true;\n    }\n    // Show the error message if there is an error\n    if (error) {\n        $(SELECTORS.SECTIONS.formDataError).show();\n        return false;\n    }\n    return true;\n};\n\n/**\n * Validate required fields.\n *\n * @param {HTMLElement} form The form to validate.\n * @return {boolean} True if all required fields are filled.\n */\nconst validateManageRequiredFields = (form) => {\n    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');\n    for (const field of requiredFields) {\n        if (!field.value) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Validate editing sections.\n *\n * @return {boolean} True if there are no editing sections.\n */\nconst validateManageEditingSections = () => {\n    const editingSections = document.querySelectorAll('.case-manage-section-edit');\n    if (editingSections.length) {\n        return false;\n    }\n    return true;\n};\n\n/**\n * Initialize the module.\n * @param {string} dataUrlView - The url to redirect after save the case.\n * @return {void}\n */\nexport const init = async(dataUrlView) => {\n    urlView = dataUrlView;\n    setEventListeners();\n    autocompleteTags(\"#case-manage-tags\");\n    autocompleteThemes(\"#case-manage-themes\");\n    createTinyMCE('case-manage-description');\n};\n"],"names":["urlView","caseid","typename","formData","id","component","componentinstance","groupid","groupname","sequence","type","title","content","then","data","render","sectionid","html","SELECTORS","SECTIONS","sections","append","fail","Notification","exception","switchSectionEdition","toEdit","Promise","resolve","reject","template","replaceWith","error","val","result","remove","async","form","document","querySelector","value","description","lang","status","parseInt","themes","Array","from","querySelectorAll","option","tags","response","addNotification","message","location","href","formDataError","errorMissingRequiredFields","errorEditingSections","join","hide","getElementById","replace","validateManageRequiredFields","show","validateManageEditingSections","requiredFields","field","length","dataUrlView"],"mappings":"qiCAwBIA,QAAU,yBAQY,CAACC,OAAQC,kBACzBC,SAAW,CACbC,GAAI,KACJC,UAAW,OACXC,kBAAmBL,OACnBM,QAAS,KACTC,UAAW,UACXC,SAAU,KACVC,KAAM,KACNR,SAAUA,SACVS,MAAO,KACPC,QAAS,8CAEET,UAAUU,MAAMC,0BACjBC,OAAO,wDAAyD,CACtEX,GAAIU,KAAKE,UACTL,MAAO,KACPC,QAAS,OACVC,MAAMI,2BACHC,mBAAUC,SAASC,UAAUC,OAAOJ,gCACvB,WAAUH,KAAKE,gBAC/BM,KAAKC,sBAAaC,cACtBF,KAAKC,sBAAaC,kBAWZC,qBAAuB,SAACT,eAAWU,+DAAgBf,6DAAQ,KAAMC,+DAAU,YAC7E,IAAIe,SAAQ,CAACC,QAASC,gBACnBC,SAAWJ,OACX,wDACA,2EACIX,OAAOe,SAAU,CAAC1B,GAAIY,UAAWL,MAAOA,MAAOC,QAASA,UAC7DC,MAAMI,OACES,0CACsB,WAAUV,iCAElC,YAAWA,aAAae,YAAYd,MACnCS,kCACe,WAAUV,aAEtBY,aAEVN,MAAMU,QACHH,OAAOG,6BACMR,UAAUQ,sFAWZ,CAAC/B,OAAQe,mBAC1Bb,SAAW,CACbC,GAAIY,UACJX,UAAW,OACXC,kBAAmBL,OACnBM,QAAS,KACTC,UAAW,UACXC,SAAU,KACVC,KAAM,KACNR,SAAU,OACVS,OAAO,mBAAG,UAASK,aAAaiB,MAChCrB,SAAS,6BAAmB,WAAUI,sDAE3Bb,UAAUU,MAAMC,OAC3BW,qBAAqBX,KAAKE,WAAW,EAAOb,SAASQ,MAAOR,SAASS,YACtEU,KAAKC,sBAAaC,mCAQKR,oDACX,CAACZ,GAAIY,YAAYH,MAAMC,OAC9BA,KAAKoB,4BACF,YAAWlB,aAAamB,YAGhCb,KAAKC,sBAAaC,4CAMaY,gBAC5BC,KAAOC,SAASC,cAAc,qBAC9BpC,SAAW,CACbC,GAAIiC,KAAKE,cAAc,yBAAyBC,MAChD7B,MAAO0B,KAAKE,cAAc,mCAAmCC,MAC7DC,aAAa,6BAAkB,2BAC/BC,KAAML,KAAKE,cAAc,mCAAmCC,MAC5DG,OAAQC,SAAS,GACjBC,OAASC,MAAMC,KACXV,KAAKW,iBAAiB,qDACtBC,QAAUA,OAAOT,QACrBU,KAAMJ,MAAMC,KACRV,KAAKW,iBAAiB,mDACtBC,QAAUA,OAAOT,mBAGfW,eAAiB,+BAAUhD,gCACpBiD,gBAAgB,CACzBC,QAAS,4BACT3C,KAAM,YAEV4C,SAASC,KAAOvD,QAAUmD,SAASlD,OACrC,MAAO+B,6BACQR,UAAUQ,mCASC,SAExBA,OAAQ,sBAEV,CAACd,mBAAUC,SAASqC,cAClBtC,mBAAUC,SAASsC,2BACnBvC,mBAAUC,SAASuC,sBACrBC,KAAK,OAAOC,aAERvB,KAAOC,SAASuB,eAAe3C,mBAAUC,SAASkB,KAAKyB,QAAQ,IAAK,YAErEC,6BAA6B1B,4BAC5BnB,mBAAUC,SAASsC,4BAA4BO,OACjDhC,OAAQ,GAGPiC,sDACC/C,mBAAUC,SAASuC,sBAAsBM,OAC3ChC,OAAQ,IAGRA,4BACEd,mBAAUC,SAASqC,eAAeQ,QAC7B,UAWTD,6BAAgC1B,aAC5B6B,eAAiB7B,KAAKW,iBAAiB,6DACxC,MAAMmB,SAASD,mBACXC,MAAM3B,aACA,SAGR,GAQLyB,8BAAgC,KACV3B,SAASU,iBAAiB,6BAC9BoB,qBAWJhC,MAAAA,cAChBpC,QAAUqE,wEAEO,2DACE,iDACL"}