{"version":3,"file":"modals.min.js","sources":["../../src/experiences/modals.js"],"sourcesContent":["import {\n    autocompleteThemes\n} from \"local_digitalta/themes/autocomplete\";\nimport {\n    autocompleteTags\n} from \"local_digitalta/tags/autocomplete\";\nimport {\n    createTinyMCE,\n    getTinyMCEContent\n} from \"local_digitalta/tiny/manage\";\nimport {\n    showManageResourcesModal\n} from \"local_digitalta/resources/modals\";\nimport {\n    experiencesGet,\n    experiencesUpsert,\n    experiencesToggleStatus\n} from \"local_digitalta/repositories/experiences_repository\";\nimport {\n    resourcesGet,\n    resourcesAssign,\n    resourcesUnassign\n} from \"local_digitalta/repositories/resources_repository\";\nimport {\n    sectionsUpsert\n} from \"local_digitalta/repositories/sections_repository\";\nimport {\n    languagesGet\n} from \"local_digitalta/repositories/languages_repository\";\nimport {\n    getList\n} from \"core/normalise\";\nimport * as Cfg from \"core/config\";\nimport * as Str from \"core/str\";\nimport Modal from \"core/modal\";\nimport ModalEvents from \"core/modal_events\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalRegistry from \"core/modal_registry\";\nimport Notification from \"core/notification\";\nimport { processFiles } from \"../tiny/manage\";\n\nconst manageModal = class extends Modal {\n    static TYPE = 'local_digitalta/manageModal';\n    static TEMPLATE = 'local_digitalta/experiences/modals/modal-manage';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(manageModal.TYPE, manageModal, manageModal.TEMPLATE);\n\nconst lockModal = class extends Modal {\n    static TYPE = 'local_digitalta/lockModal';\n    static TEMPLATE = 'local_digitalta/experiences/modals/modal-lock';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(lockModal.TYPE, lockModal, lockModal.TEMPLATE);\n\nconst unlockModal = class extends Modal {\n    static TYPE = 'local_digitalta/unlockModal';\n    static TEMPLATE = 'local_digitalta/experiences/modals/modal-lock';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(unlockModal.TYPE, unlockModal, unlockModal.TEMPLATE);\n\nconst manageReflectionModal = class extends Modal {\n    static TYPE = 'local_digitalta/manageReflectionModal';\n    static TEMPLATE = 'local_digitalta/experiences/modals/modal-reflection';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(manageReflectionModal.TYPE, manageReflectionModal, manageReflectionModal.TEMPLATE);\n\nconst linkResourcesModal = class extends Modal {\n    static TYPE = \"local_digitalta/linkResourcesModal\";\n    static TEMPLATE = \"local_digitalta/experiences/modals/modal-resources\";\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(linkResourcesModal.TYPE, linkResourcesModal, linkResourcesModal.TEMPLATE);\n\nconst linkResourceModal = class extends Modal {\n    static TYPE = \"local_digitalta/linkResourceModal\";\n    static TEMPLATE = \"local_digitalta/experiences/modals/modal-resource-link\";\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(linkResourceModal.TYPE, linkResourceModal, linkResourceModal.TEMPLATE);\n\nconst unlinkResourceModal = class extends Modal {\n    static TYPE = 'local_digitalta/unlinkResourceModal';\n    static TEMPLATE = 'local_digitalta/experiences/modals/modal-resource-unlink';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(unlinkResourceModal.TYPE, unlinkResourceModal, unlinkResourceModal.TEMPLATE);\n\n// Manage modal\n\n/**\n * Display the manage modal for asking questions\n *\n * @param {int} experienceid The experience id.\n */\nexport const showManageAskModal = async (experienceid = null) => {\n    const string_keys = [\n        { key: \"teacheracademy:actions:ask\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:description\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:title\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:title:placeholder\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:visibility\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:language\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:themes\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:tags\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:ask:picture\", component: \"local_digitalta\" },\n        { key: \"visibility:public\", component: \"local_digitalta\" },\n        { key: \"visibility:private\", component: \"local_digitalta\" }\n    ];\n    showManageModal(experienceid, string_keys);\n};\n\n/**\n * Display the manage modal for sharing experiences.\n *\n * @param {int} experienceid The experience id.\n */\nexport const showManageShareModal = async (experienceid = null) => {\n    const string_keys = [\n        { key: \"teacheracademy:actions:share\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:description\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:title\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:title:placeholder\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:visibility\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:language\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:themes\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:tags\", component: \"local_digitalta\" },\n        { key: \"teacheracademy:actions:share:picture\", component: \"local_digitalta\" },\n        { key: \"visibility:public\", component: \"local_digitalta\" },\n        { key: \"visibility:private\", component: \"local_digitalta\" }\n    ];\n    showManageModal(experienceid, string_keys);\n};\n\n/**\n * Display the manage modal.\n *\n * @param {int} experienceid The experience id.\n * @param {Array} string_keys The string keys to display.\n */\nexport const showManageModal = async (experienceid = null, string_keys) => {\n    // Strings\n    const strings = await Str.get_strings(string_keys);\n    // Languages\n    const languages = await languagesGet({prioritizeInstalled: true});\n    // Experience\n    const experience = experienceid === null\n        ? Promise.resolve({})\n        : await experiencesGet(experienceid).then((response) => response.experience);\n    Promise.all([strings, languages, experience])\n        .then(([strings, languages, experience]) =>\n            displayManageModal(strings, languages, experience));\n};\n\n/**\n * Display the manage modal.\n *\n * @param {Array} strings The strings to display.\n * @param {Array} languages The list of available languages.\n * @param {Object} experience The experience object.\n *\n */\nexport const displayManageModal = async (strings, languages, experience = {}) => {\n    // Languages\n    let anyLanguageSelected = false;\n    languages = languages.map((language) => {\n        language.selected = false;\n        if (experience.hasOwnProperty('lang') && language.code === experience.lang) {\n            language.selected = anyLanguageSelected = true;\n        }\n        return {\n            key: language.code,\n            value: language.name,\n            selected: language.selected\n        };\n    });\n    if (!anyLanguageSelected) {\n        languages[0].selected = true;\n    }\n    // Sections\n    let sections = {};\n    if (experience.sections) {\n        experience.sections.forEach((section) => {\n            sections[section.groupname_simplified] = section;\n        });\n    }\n    experience.sections = sections;\n    // Visibility\n    let visibility = [\n        { key: 1, value: strings[9] },\n        { key: 0, value: strings[10] }\n    ];\n    let anyVisibilitySelected = false;\n    visibility = visibility.map((item) => {\n        item.selected = false;\n        if (experience.hasOwnProperty('visible') && item.key === experience.visible) {\n            item.selected = anyVisibilitySelected = true;\n        }\n        return {\n            key: item.key,\n            value: item.value,\n            selected: item.key === experience.visible\n        };\n    });\n    if (!anyVisibilitySelected) {\n        visibility[0].selected = true;\n    }\n    const modal = await ModalFactory.create({\n        type: manageModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1],\n                sections: {\n                    title: {\n                        label: strings[2],\n                        placeholder: strings[3]\n                    },\n                    visibility: {\n                        label: strings[4]\n                    },\n                    language: {\n                        label: strings[5]\n                    },\n                    themes: {\n                        label: strings[6]\n                    },\n                    tags: {\n                        label: strings[7]\n                    },\n                    picture: {\n                        label: strings[8]\n                    }\n                },\n                visibility: visibility,\n                languages: languages\n            },\n            current: {\n                id: experience.id ?? 0,\n                title: experience.title ?? null,\n                visible: experience.visible ?? null,\n                lang: experience.lang ?? null,\n                sections: experience.sections ?? [],\n                tags: experience.tags ?? [],\n                themes: experience.themes ?? []\n            }\n        },\n        large: true,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    createTinyMCE('experience-manage-reflection-what-content');\n    autocompleteTags('#experience-manage-tags');\n    autocompleteThemes('#experience-manage-themes');\n    $root.on(ModalEvents.save, (event, modal) => {\n        event.preventDefault();\n        const form = $root[0].querySelector('form');\n        if (validateManageRequiredFields(form)) {\n            handleManageModalSubmission(event, modal);\n        }\n    });\n};\n\n/**\n * Handle the submission of the modal.\n *\n * @param {Event} event\n * @param {Modal} modal\n */\nconst handleManageModalSubmission = async (event, modal) => {\n    const form = getList(modal.getRoot())[0].querySelector(\"form\");\n    if (!form) {\n        return;\n    }\n    const formData = {\n        id: form.querySelector('input[name=\"experience-manage-id\"]').value,\n        title: form.querySelector('input[name=\"experience-manage-title\"]').value,\n        visible: form.querySelector('select[name=\"experience-manage-visibility\"]').value,\n        lang: form.querySelector('select[name=\"experience-manage-lang\"]').value,\n        sections: [\n            {\n                id: form.querySelector('textarea[name=\"experience-manage-reflection-what-content\"]')\n                    .getAttribute('data-id') || null,\n                groupid: form.querySelector('textarea[name=\"experience-manage-reflection-what-content\"]')\n                    .getAttribute('data-groupid') || null,\n                groupname: form.querySelector('textarea[name=\"experience-manage-reflection-what-content\"]')\n                    .getAttribute('data-groupname') || null,\n                typename: 'text',\n                content: getTinyMCEContent('experience-manage-reflection-what-content')\n            }\n        ],\n        themes: Array.from(\n            form.querySelectorAll('select[name=\"experience-manage-themes\"] option:checked'),\n            option => option.value),\n        tags: Array.from(\n            form.querySelectorAll('select[name=\"experience-manage-tags\"] option:checked'),\n            option => option.value)\n    };\n    try {\n        formData.sections[0].content = await processFiles(formData.sections[0].content);\n        const response = await experiencesUpsert(formData);\n        Notification.addNotification({\n            message: \"Experience saved successfully.\",\n            type: 'success'\n        });\n        location.href = Cfg.wwwroot + '/local/digitalta/pages/experiences/view.php?id=' + response.experienceid;\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Validate required fields.\n *\n * @param {HTMLElement} form The form to validate.\n * @return {boolean} True if all required fields are filled.\n */\nconst validateManageRequiredFields = (form) => {\n    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');\n    for (const field of requiredFields) {\n        if (!field.value) {\n            field.focus();\n            return false;\n        }\n    }\n    return true;\n};\n\n// Lock and unlock modals\n\n/**\n * Display the lock modal.\n *\n * @param {int} experienceid The experience id.\n */\nexport const showLockModal = async (experienceid) => {\n    const string_keys = [\n        { key: \"experience:lock\", component: \"local_digitalta\" },\n        { key: \"experience:lock:confirm\", component: \"local_digitalta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    Promise.all([strings])\n        .then(([strings]) => displayLockModal(strings, experienceid));\n};\n\n/**\n * Display the unlock modal.\n *\n * @param {int} experienceid The experience id.\n */\nexport const showUnlockModal = async (experienceid) => {\n    const string_keys = [\n        { key: \"experience:unlock\", component: \"local_digitalta\" },\n        { key: \"experience:unlock:confirm\", component: \"local_digitalta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    Promise.all([strings])\n        .then(([strings]) => displayLockModal(strings, experienceid));\n};\n\n/**\n * Display the lock/unlock modal.\n *\n * @param {Array} strings The strings to display.\n * @param {int} experienceid The experience id.\n */\nconst displayLockModal = async (strings, experienceid) => {\n    const modal = await ModalFactory.create({\n        type: lockModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1]\n            }\n        },\n        large: false,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, (event) => {\n        event.preventDefault();\n        experiencesToggleStatus(experienceid);\n        modal.destroy();\n        window.location.reload();\n    });\n};\n\n// Manage reflection modal\n\n/**\n * Display the manage reflection modal.\n *\n * @param {int} experienceid The experience id.\n */\nexport const showManageReflectionModal = async (experienceid) => {\n    // Strings\n    const string_keys = [\n        { key: \"experience:reflection:title\", component: \"local_digitalta\" },\n        { key: \"experience:reflection:description\", component: \"local_digitalta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    // Experience\n    const experience = experienceid === null\n        ? Promise.resolve({})\n        : await experiencesGet(experienceid).then((response) => response.experience);\n    Promise.all([strings, experience])\n        .then(([strings, experience]) => displayManageReflectionModal(strings, experience));\n};\n\n/**\n * Display the manage reflection modal.\n *\n * @param {Array} strings The strings to display.\n * @param {Object} experience The experience object.\n */\nexport const displayManageReflectionModal = async (strings, experience) => {\n    let sections = {};\n    experience.sections.forEach((section) => {\n        sections[section.groupname_simplified] = section;\n    });\n    experience.sections = sections;\n    const modal = await ModalFactory.create({\n        type: manageReflectionModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1]\n            },\n            experienceid: experience.id ?? 0,\n            sections: experience.sections ?? []\n        },\n        large: true,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    createTinyMCE('experience-manage-reflection-what-content');\n    createTinyMCE('experience-manage-reflection-so_what-content');\n    createTinyMCE('experience-manage-reflection-now_what-content');\n    $root.on(ModalEvents.save, (event, modal) => {\n        event.preventDefault();\n        const form = $root[0].querySelector('form');\n        if (validateManageRequiredFields(form)) {\n            handleManageReflectionModalSubmission(event, modal);\n        }\n    });\n};\n\n/**\n * Handle the submission of the modal.\n *\n * @param {Event} event\n * @param {Modal} modal\n */\nconst handleManageReflectionModalSubmission = async (event, modal) => {\n    const form = getList(modal.getRoot())[0].querySelector(\"form\");\n    if (!form) {\n        return;\n    }\n    const formData = {\n        id: form.querySelector('input[name=\"experience-manage-id\"]').value,\n        sections: [\n            {\n                id: form.querySelector('textarea[name=\"experience-manage-reflection-what-content\"]')\n                    .getAttribute('data-id'),\n                groupid: form.querySelector('textarea[name=\"experience-manage-reflection-what-content\"]')\n                    .getAttribute('data-groupid'),\n                content: getTinyMCEContent('experience-manage-reflection-what-content')\n            },\n            {\n                id: form.querySelector('textarea[name=\"experience-manage-reflection-so_what-content\"]')\n                    .getAttribute('data-id'),\n                groupid: form.querySelector('textarea[name=\"experience-manage-reflection-so_what-content\"]')\n                    .getAttribute('data-groupid'),\n                content: getTinyMCEContent('experience-manage-reflection-so_what-content')\n            },\n            {\n                id: form.querySelector('textarea[name=\"experience-manage-reflection-now_what-content\"]')\n                    .getAttribute('data-id'),\n                groupid: form.querySelector('textarea[name=\"experience-manage-reflection-now_what-content\"]')\n                    .getAttribute('data-groupid'),\n                content: getTinyMCEContent('experience-manage-reflection-now_what-content')\n            }\n        ]\n    };\n    try {\n        let promises = [];\n        for (const section of formData.sections) {\n            section.content = await processFiles(section.content);\n\n            promises.push(sectionsUpsert({\n                'id': section.id,\n                'component': 'experience',\n                'componentinstance': formData.id,\n                'groupid': section.groupid,\n                'groupname': null,\n                'sequence': null,\n                'type': null,\n                'typename': 'text',\n                'title': null,\n                'content': section.content\n            }));\n        }\n        await Promise.all(promises);\n        Notification.addNotification({\n            message: \"Reflection saved successfully.\",\n            type: 'success'\n        });\n        location.href = Cfg.wwwroot + '/local/digitalta/pages/experiences/view.php?id=' + formData.id;\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n// Link resources modal\n\n/**\n * Display the link resources modal.\n *\n * @param {int} experienceid The experience id.\n */\nexport const displayLinkResourcesModal = async (experienceid = null) => {\n    const { resources } = await resourcesGet({});\n    const modal = await ModalFactory.create({\n        type: linkResourcesModal.TYPE,\n        templateContext: {\n            experienceid: experienceid,\n            resources\n        },\n        large: true,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    const changeElement = $root.find(\"#changeToManageResource\").get(0);\n    if (changeElement) {\n        changeElement.onclick = () => {\n            showManageResourcesModal(null, experienceid);\n            modal.destroy();\n        };\n    }\n};\n\n/**\n * Display the link resource modal.\n *\n * @param {int} experienceid The experience id.\n * @param {int} resourceid The resource id.\n */\nexport const displayLinkResourceModal = async (experienceid, resourceid) => {\n    // Resource\n    const resource = await resourcesGet({id: resourceid})\n        .then((response) => { return response.resources[0]; });\n    const modal = await ModalFactory.create({\n        type: linkResourceModal.TYPE,\n        templateContext: {\n            experienceid: experienceid,\n            resourceid: resource.id,\n            resourcename: resource.name\n        },\n        large: true,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    createTinyMCE('experience-link-resource-description');\n    $root.on(ModalEvents.save, (event, modal) => {\n        handleLinkResourceModalSubmission(event, modal);\n    });\n};\n\n/**\n * Handle the submission of the modal.\n *\n * @param {Event} event\n * @param {Modal} modal\n */\nconst handleLinkResourceModalSubmission = async (event, modal) => {\n    const form = getList(modal.getRoot())[0].querySelector(\"form\");\n    if (!form) {\n        return;\n    }\n    const formData = {\n        resourceid: form.querySelector('input[name=\"resourceid\"]').value,\n        component: 'experience',\n        componentinstance: form.querySelector('input[name=\"experienceid\"]').value,\n        description: getTinyMCEContent('experience-link-resource-description')\n    };\n    try {\n        formData.description = await processFiles(formData.description);\n        await resourcesAssign(formData);\n        Notification.addNotification({\n            message: \"Resource linked successfully.\",\n            type: 'success'\n        });\n        location.reload();\n    }\n    catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Display the unlink resource modal.\n *\n * @param {int} experienceid The experience id.\n * @param {int} resourceid The resource id.\n */\nexport const showUnlinkResourceModal = async (experienceid, resourceid) => {\n    const string_keys = [\n        { key: \"experience:resources:unlink\", component: \"local_digitalta\" },\n        { key: \"experience:resources:unlink:confirm\", component: \"local_digitalta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    Promise.all([strings])\n        .then(([strings]) => displayUnlinkResourceModal(strings, experienceid, resourceid));\n};\n\n/**\n * Display the unlink resource modal.\n *\n * @param {Array} strings The strings to display.\n * @param {int} experienceid The experience id.\n * @param {int} resourceid The resource id.\n */\nconst displayUnlinkResourceModal = async (strings, experienceid, resourceid) => {\n    const modal = await ModalFactory.create({\n        type: lockModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1]\n            }\n        },\n        large: false,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, async (event, modal) => {\n        event.preventDefault();\n        try {\n            await resourcesUnassign({\n                id: resourceid,\n                component: 'experience',\n                componentinstance: experienceid\n            });\n            Notification.addNotification({\n                message: \"Resource unlinked successfully.\",\n                type: 'success'\n            });\n            modal.destroy();\n            window.location.reload();\n        } catch (error) {\n            Notification.exception(error);\n        }\n    });\n};\n"],"names":["manageModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","register","TYPE","TEMPLATE","lockModal","unlockModal","manageReflectionModal","linkResourcesModal","linkResourceModal","unlinkResourceModal","async","experienceid","string_keys","key","component","showManageModal","strings","Str","get_strings","languages","prioritizeInstalled","experience","Promise","resolve","then","response","all","_ref","displayManageModal","anyLanguageSelected","map","language","selected","hasOwnProperty","code","lang","value","name","sections","forEach","section","groupname_simplified","visibility","anyVisibilitySelected","item","visible","modal","ModalFactory","create","type","templateContext","title","description","label","placeholder","themes","tags","picture","current","id","large","removeOnClose","show","$root","getRoot","on","ModalEvents","save","event","preventDefault","form","querySelector","validateManageRequiredFields","handleManageModalSubmission","formData","getAttribute","groupid","groupname","typename","content","Array","from","querySelectorAll","option","addNotification","message","location","href","Cfg","wwwroot","error","exception","requiredFields","field","focus","_ref2","displayLockModal","_ref3","destroy","window","reload","_ref4","displayManageReflectionModal","handleManageReflectionModalSubmission","promises","push","resources","changeElement","find","get","onclick","resourceid","resource","resourcename","handleLinkResourceModalSubmission","componentinstance","_ref5","displayUnlinkResourceModal"],"mappings":"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"}