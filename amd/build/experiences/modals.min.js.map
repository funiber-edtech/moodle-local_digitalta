{"version":3,"file":"modals.min.js","sources":["../../src/experiences/modals.js"],"sourcesContent":["import { autocompleteThemes } from \"local_dta/themes/autocomplete\";\r\nimport { createTinyMCE, getTinyMCEContent } from \"local_dta/tiny/manage\";\r\nimport { displayDialogue } from \"local_dta/resources/manage_resources\";\r\nimport { experienceGet, experienceUpsert } from \"local_dta/repositories/experiences_repository\";\r\nimport { getAllResources } from \"local_dta/repositories/resources_repository\";\r\nimport { getCases } from \"local_dta/repositories/cases_repository\";\r\nimport { getLanguages } from \"local_dta/repositories/languages_repository\";\r\nimport { getList } from \"core/normalise\";\r\n/* @EXPERIENCE_PICTURE TODO: Add picture to experience creation\r\nimport { prepareDraftHTML, saveFiles } from \"local_dta/files/filemanager\";\r\n*/\r\nimport { SELECTORS } from \"./main\";\r\nimport { contextUpsert } from \"local_dta/repositories/context_repository\";\r\nimport * as Cfg from \"core/config\";\r\nimport * as Str from \"core/str\";\r\nimport $ from \"jquery\";\r\nimport Modal from \"core/modal\";\r\nimport ModalEvents from \"core/modal_events\";\r\nimport ModalFactory from \"core/modal_factory\";\r\nimport ModalRegistry from \"core/modal_registry\";\r\nimport Notification from \"core/notification\";import { autocompleteTags } from \"local_dta/tags/autocomplete\";\r\n\r\nconst manageModal = class extends Modal {\r\n    static TYPE = 'local_dta/manageModal';\r\n    static TEMPLATE = 'local_dta/experiences/modals/modal-manage';\r\n    registerEventListeners() {\r\n        // Call the parent registration.\r\n        super.registerEventListeners();\r\n        // Register to close on save/cancel.\r\n        this.registerCloseOnSave();\r\n        this.registerCloseOnCancel();\r\n    }\r\n};\r\n\r\nModalRegistry.register(manageModal.TYPE, manageModal, manageModal.TEMPLATE);\r\n\r\nconst linkResourcesModal = class extends Modal {\r\n    static TYPE = \"local_dta/linkResourcesModal\";\r\n    static TEMPLATE = \"local_dta/experiences/modals/modal-import-resources\";\r\n    registerEventListeners() {\r\n        super.registerEventListeners();\r\n        this.registerCloseOnSave();\r\n        this.registerCloseOnCancel();\r\n    }\r\n};\r\n\r\nModalRegistry.register(linkResourcesModal.TYPE, linkResourcesModal, linkResourcesModal.TEMPLATE);\r\n\r\nconst linkCasesModal = class extends Modal {\r\n    static TYPE = \"local_dta/linkCasesModal\";\r\n    static TEMPLATE = \"local_dta/experiences/modals/modal-import-cases\";\r\n    registerEventListeners() {\r\n        super.registerEventListeners();\r\n        this.registerCloseOnSave();\r\n        this.registerCloseOnCancel();\r\n    }\r\n};\r\n\r\nModalRegistry.register(linkCasesModal.TYPE, linkCasesModal, linkCasesModal.TEMPLATE);\r\n\r\nexport const showManageModal = async (experienceid) => {\r\n    const string_keys = [\r\n        { key: \"teacheracademy:actions:share\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:description\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:title\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:title:placeholder\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:visibility\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:language\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:themes\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:tags\", component: \"local_dta\" },\r\n        { key: \"teacheracademy:actions:share:picture\", component: \"local_dta\" },\r\n        { key: \"visibility:public\", component: \"local_dta\" },\r\n        { key: \"visibility:private\", component: \"local_dta\" }\r\n    ];\r\n    const strings = Str.get_strings(string_keys);\r\n    Promise.all([strings])\r\n        .then(([strings]) => displayManageModal(strings, experienceid));\r\n};\r\n\r\nexport const displayManageModal = async (strings, experienceid) => {\r\n    let experience = {};\r\n    if (experienceid !== null) {\r\n        await experienceGet(experienceid).then((response) => {\r\n            experience = response.experience;\r\n        });\r\n    }\r\n    let languages = await getLanguages({prioritizeInstalled: true});\r\n    languages = languages.map((language) => {\r\n        return {\r\n            key: language.code,\r\n            value: language.name,\r\n            selected: language.code === experience.lang\r\n        };\r\n    });\r\n    let visibility = [\r\n        { key: 1, value: strings[9] },\r\n        { key: 0, value: strings[10] }\r\n    ];\r\n    visibility = visibility.map((item) => {\r\n        return {\r\n            key: item.key,\r\n            value: item.value,\r\n            selected: item.key === experience.visible\r\n        };\r\n    });\r\n    const modal = await ModalFactory.create({\r\n        type: manageModal.TYPE,\r\n        templateContext: {\r\n            modal: {\r\n                title: strings[0],\r\n                description: strings[1],\r\n                sections: {\r\n                    title: {\r\n                        label: strings[2],\r\n                        placeholder: strings[3]\r\n                    },\r\n                    visibility: {\r\n                        label: strings[4]\r\n                    },\r\n                    language: {\r\n                        label: strings[5]\r\n                    },\r\n                    themes: {\r\n                        label: strings[6]\r\n                    },\r\n                    tags: {\r\n                        label: strings[7]\r\n                    },\r\n                    picture: {\r\n                        label: strings[8]\r\n                    }\r\n                },\r\n                visibility: visibility,\r\n                languages: languages\r\n            },\r\n            current: {\r\n                id: experience.id ?? 0,\r\n                title: experience.title ?? null,\r\n                description: experience.description ?? null,\r\n                visible: experience.visible ?? null,\r\n                lang: experience.lang ?? null,\r\n                tags: experience.tags ?? [],\r\n                themes: experience.themes ?? []\r\n            }\r\n        },\r\n        large: true,\r\n    });\r\n    modal.show();\r\n    const $root = modal.getRoot();\r\n    createTinyMCE('experience-add-description');\r\n    autocompleteTags('#experience-add-tags');\r\n    autocompleteThemes('#experience-add-themes');\r\n    /* @EXPERIENCE_PICTURE TODO: Add picture to experience creation\r\n    await prepareDraftHTML('experience_picture').then((response) => {\r\n        document.querySelector('#experience-add-picture').innerHTML = response.html;\r\n    });\r\n    */\r\n    $root.on(ModalEvents.save, (event, modal) => {\r\n        event.preventDefault();\r\n        const form = $root[0].querySelector('form');\r\n        if (validateManageRequiredFields(form)) {\r\n            handleManageModalSubmission(event, modal);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Handle the submission of the modal.\r\n *\r\n * @param {Event} event\r\n * @param {Modal} modal\r\n */\r\nconst handleManageModalSubmission = async (event, modal) => {\r\n    const form = getList(modal.getRoot())[0].querySelector(\"form\");\r\n    if (!form) {\r\n        return;\r\n    }\r\n    const formData = {\r\n        id: form.querySelector('input[name=\"experience-add-id\"]').value,\r\n        title: form.querySelector('input[name=\"experience-add-title\"]').value,\r\n        description: getTinyMCEContent('experience-add-description'),\r\n        visible: form.querySelector('select[name=\"experience-add-visibility\"]').value,\r\n        lang: form.querySelector('select[name=\"experience-add-lang\"]').value,\r\n        themes: Array.from(\r\n            form.querySelectorAll('select[name=\"experience-add-themes\"] option:checked'),\r\n            option => option.value),\r\n        tags: Array.from(\r\n            form.querySelectorAll('select[name=\"experience-add-tags\"] option:checked'),\r\n            option => option.value)\r\n    };\r\n    try {\r\n        const response = await experienceUpsert(formData);\r\n        /* @EXPERIENCE_PICTURE TODO: Add picture to experience creation\r\n        await saveFiles('experience-add-picture', 'fileManager', response.experienceid, 'experience_picture');\r\n        */\r\n        Notification.addNotification({\r\n            message: \"Experience saved successfully.\",\r\n            type: 'success'\r\n        });\r\n        location.href = Cfg.wwwroot + '/local/dta/pages/experiences/view.php?id=' + response.experienceid;\r\n    } catch (error) {\r\n        Notification.exception(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Validate required fields.\r\n *\r\n * @param {HTMLElement} form The form to validate.\r\n * @return {boolean} True if all required fields are filled.\r\n */\r\nconst validateManageRequiredFields = (form) => {\r\n    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');\r\n    for (const field of requiredFields) {\r\n        if (!field.value) {\r\n            field.focus();\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const displaylinkResourcesModal = async (change) => {\r\n    const { resources } = await getAllResources();\r\n    const modal = await ModalFactory.create({\r\n        type: linkResourcesModal.TYPE,\r\n        templateContext: { elementid_: Date.now(), resources, change: change},\r\n        large: true,\r\n    });\r\n    modal.show();\r\n    const $root = modal.getRoot();\r\n    if (change) {\r\n        const changeElement = $root.find(\"#changeToAddResource\").get(0);\r\n        if (changeElement) {\r\n            changeElement.onclick = () => {\r\n                displayDialogue(true);\r\n                modal.hide();\r\n            };\r\n        }\r\n    }\r\n    $root.on(ModalEvents.save, () => {\r\n        handleResourceModal();\r\n    });\r\n};\r\n\r\nconst handleResourceModal = () => {\r\n    const experienceid = $(SELECTORS.INPUTS.experienceid).val();\r\n    const seleccionados = [];\r\n    $(\"#resources-group input[type='checkbox']:checked\").each(function () {\r\n        // Agregar el valor del checkbox seleccionado al array\r\n        seleccionados.push($(this).val());\r\n    });\r\n    const contextid = [];\r\n    seleccionados.forEach(async (resourceid) => {\r\n        contextid.push(\r\n            contextUpsert({\r\n                component: \"experience\",\r\n                componentinstance: experienceid,\r\n                modifier: \"resource\",\r\n                modifierinstance: resourceid,\r\n            })\r\n        );\r\n    });\r\n    Promise.all(contextid)\r\n        .then(() => {\r\n            window.location.reload();\r\n            return;\r\n        })\r\n        .catch((error) => {\r\n            Notification.exception(error);\r\n        });\r\n};\r\n\r\nexport const displaylinkCasesModal = async () => {\r\n    const { cases } = await getCases();\r\n\r\n    const modal = await ModalFactory.create({\r\n        type: linkCasesModal.TYPE,\r\n        templateContext: { elementid_: Date.now(), cases },\r\n        large: true,\r\n    });\r\n    modal.show();\r\n    const $root = modal.getRoot();\r\n    $root.on(ModalEvents.save, () => {\r\n        handleCasesModal();\r\n    });\r\n};\r\n\r\nconst handleCasesModal = () => {\r\n    const experienceid = $(SELECTORS.INPUTS.experienceid).val();\r\n    const seleccionados = [];\r\n    $(\"#cases-group input[type='checkbox']:checked\").each(function () {\r\n        seleccionados.push($(this).val());\r\n    });\r\n    const contextid = [];\r\n    seleccionados.forEach(async (caseid) => {\r\n        contextid.push(\r\n            contextUpsert({\r\n                component: \"experience\",\r\n                componentinstance: experienceid,\r\n                modifier: \"case\",\r\n                modifierinstance: caseid,\r\n            })\r\n        );\r\n    });\r\n    Promise.all(contextid)\r\n        .then(() => {\r\n            window.location.reload();\r\n            return;\r\n        })\r\n        .catch((error) => {\r\n            Notification.exception(error);\r\n        });\r\n};\r\n"],"names":["manageModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","register","TYPE","TEMPLATE","linkResourcesModal","linkCasesModal","async","strings","Str","get_strings","key","component","Promise","all","then","_ref","displayManageModal","experienceid","experience","response","languages","prioritizeInstalled","map","language","code","value","name","selected","lang","visibility","item","visible","modal","ModalFactory","create","type","templateContext","title","description","sections","label","placeholder","themes","tags","picture","current","id","large","show","$root","getRoot","on","ModalEvents","save","event","preventDefault","form","querySelector","validateManageRequiredFields","handleManageModalSubmission","formData","Array","from","querySelectorAll","option","addNotification","message","location","href","Cfg","wwwroot","error","exception","requiredFields","field","focus","resources","elementid_","Date","now","change","changeElement","find","get","onclick","hide","handleResourceModal","SELECTORS","INPUTS","val","seleccionados","each","push","this","contextid","forEach","componentinstance","modifier","modifierinstance","resourceid","window","reload","catch","cases","handleCasesModal","caseid"],"mappings":"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"}