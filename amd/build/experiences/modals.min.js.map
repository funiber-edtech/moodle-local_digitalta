{"version":3,"file":"modals.min.js","sources":["../../src/experiences/modals.js"],"sourcesContent":["import { autocompleteThemes } from \"local_dta/themes/autocomplete\";\nimport { createTinyMCE, getTinyMCEContent } from \"local_dta/tiny/manage\";\nimport { displayDialogue } from \"local_dta/resources/manage_resources\";\nimport { experienceGet, experienceUpsert } from \"local_dta/repositories/experiences_repository\";\nimport { getAllResources } from \"local_dta/repositories/resources_repository\";\nimport { getCases } from \"local_dta/repositories/cases_repository\";\nimport { getLanguages } from \"local_dta/repositories/languages_repository\";\nimport { getList } from \"core/normalise\";\n/* @EXPERIENCE_PICTURE TODO: Add picture to experience creation\nimport { prepareDraftHTML, saveFiles } from \"local_dta/files/filemanager\";\n*/\nimport { SELECTORS } from \"./main\";\nimport { upsertContext } from \"local_dta/repositories/context_repository\";\nimport * as Cfg from \"core/config\";\nimport * as Str from \"core/str\";\nimport $ from \"jquery\";\nimport Modal from \"core/modal\";\nimport ModalEvents from \"core/modal_events\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalRegistry from \"core/modal_registry\";\nimport Notification from \"core/notification\";import { autocompleteTags } from \"local_dta/tags/autocomplete\";\n\nconst manageModal = class extends Modal {\n    static TYPE = 'local_dta/manageModal';\n    static TEMPLATE = 'local_dta/experiences/modals/modal-manage';\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n        // Register to close on save/cancel.\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\n\nModalRegistry.register(manageModal.TYPE, manageModal, manageModal.TEMPLATE);\n\nconst linkResourcesModal = class extends Modal {\n    static TYPE = \"local_dta/linkResourcesModal\";\n    static TEMPLATE = \"local_dta/experiences/modals/modal-import-resources\";\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\n\nModalRegistry.register(linkResourcesModal.TYPE, linkResourcesModal, linkResourcesModal.TEMPLATE);\n\nconst linkCasesModal = class extends Modal {\n    static TYPE = \"local_dta/linkCasesModal\";\n    static TEMPLATE = \"local_dta/experiences/modals/modal-import-cases\";\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\n\nModalRegistry.register(linkCasesModal.TYPE, linkCasesModal, linkCasesModal.TEMPLATE);\n\nexport const showManageModal = async (experienceid) => {\n    const string_keys = [\n        { key: \"teacheracademy:actions:share\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:description\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:title\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:title:placeholder\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:visibility\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:language\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:themes\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:tags\", component: \"local_dta\" },\n        { key: \"teacheracademy:actions:share:picture\", component: \"local_dta\" },\n        { key: \"visibility:public\", component: \"local_dta\" },\n        { key: \"visibility:private\", component: \"local_dta\" }\n    ];\n    const strings = Str.get_strings(string_keys);\n    Promise.all([strings])\n        .then(([strings]) => displayManageModal(strings, experienceid));\n};\n\nexport const displayManageModal = async (strings, experienceid) => {\n    let experience = {};\n    if (experienceid !== null) {\n        await experienceGet(experienceid).then((response) => {\n            experience = response.experience;\n        });\n    }\n    let languages = await getLanguages({prioritizeInstalled: true});\n    languages = languages.map((language) => {\n        return {\n            key: language.code,\n            value: language.name,\n            selected: language.code === experience.lang\n        };\n    });\n    window.console.log(languages);\n    let visibility = [\n        { key: 1, value: strings[9] },\n        { key: 0, value: strings[10] }\n    ];\n    visibility = visibility.map((item) => {\n        return {\n            key: item.key,\n            value: item.value,\n            selected: item.key === experience.visible\n        };\n    });\n    const modal = await ModalFactory.create({\n        type: manageModal.TYPE,\n        templateContext: {\n            modal: {\n                title: strings[0],\n                description: strings[1],\n                sections: {\n                    title: {\n                        label: strings[2],\n                        placeholder: strings[3]\n                    },\n                    visibility: {\n                        label: strings[4]\n                    },\n                    language: {\n                        label: strings[5]\n                    },\n                    themes: {\n                        label: strings[6]\n                    },\n                    tags: {\n                        label: strings[7]\n                    },\n                    picture: {\n                        label: strings[8]\n                    }\n                },\n                visibility: visibility,\n                languages: languages\n            },\n            current: {\n                id: experience.id ?? 0,\n                title: experience.title ?? null,\n                description: experience.description ?? null,\n                visible: experience.visible ?? null,\n                lang: experience.lang ?? null,\n                tags: experience.tags ?? [],\n                themes: experience.themes ?? []\n            }\n        },\n        large: true,\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    createTinyMCE('experience-add-description');\n    autocompleteTags('#experience-add-tags');\n    autocompleteThemes('#experience-add-themes');\n    /* @EXPERIENCE_PICTURE TODO: Add picture to experience creation\n    await prepareDraftHTML('experience_picture').then((response) => {\n        document.querySelector('#experience-add-picture').innerHTML = response.html;\n    });\n    */\n    $root.on(ModalEvents.save, (event, modal) => {\n        event.preventDefault();\n        const form = $root[0].querySelector('form');\n        if (validateManageRequiredFields(form)) {\n            handleManageModalSubmission(event, modal);\n        }\n    });\n};\n\n/**\n * Handle the submission of the modal.\n *\n * @param {Event} event\n * @param {Modal} modal\n */\nconst handleManageModalSubmission = async (event, modal) => {\n    window.console.log(\"UHUHUHU\");\n    const form = getList(modal.getRoot())[0].querySelector(\"form\");\n    if (!form) {\n        return;\n    }\n    const formData = {\n        id: form.querySelector('input[name=\"experience-add-id\"]').value,\n        title: form.querySelector('input[name=\"experience-add-title\"]').value,\n        description: getTinyMCEContent('experience-add-description'),\n        visible: form.querySelector('select[name=\"experience-add-visibility\"]').value,\n        lang: form.querySelector('select[name=\"experience-add-lang\"]').value,\n        themes: Array.from(\n            form.querySelectorAll('select[name=\"experience-add-themes\"] option:checked'),\n            option => option.value),\n        tags: Array.from(\n            form.querySelectorAll('select[name=\"experience-add-tags\"] option:checked'),\n            option => option.value)\n    };\n    window.console.log(formData);\n    try {\n        const response = await experienceUpsert(formData);\n        /* @EXPERIENCE_PICTURE TODO: Add picture to experience creation\n        await saveFiles('experience-add-picture', 'fileManager', response.experienceid, 'experience_picture');\n        */\n        Notification.addNotification({\n            message: \"Experience saved successfully.\",\n            type: 'success'\n        });\n        location.href = Cfg.wwwroot + '/local/dta/pages/experiences/view.php?id=' + response.experienceid;\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Validate required fields.\n *\n * @param {HTMLElement} form The form to validate.\n * @return {boolean} True if all required fields are filled.\n */\nconst validateManageRequiredFields = (form) => {\n    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');\n    for (const field of requiredFields) {\n        if (!field.value) {\n            field.focus();\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const displaylinkResourcesModal = async (change) => {\n    const { resources } = await getAllResources();\n    const modal = await ModalFactory.create({\n        type: linkResourcesModal.TYPE,\n        templateContext: { elementid_: Date.now(), resources, change: change},\n        large: true,\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    if (change) {\n        const changeElement = $root.find(\"#changeToAddResource\").get(0);\n        if (changeElement) {\n            changeElement.onclick = () => {\n                displayDialogue(true);\n                modal.hide();\n            };\n        }\n    }\n    $root.on(ModalEvents.save, () => {\n        handleResourceModal();\n    });\n};\n\nconst handleResourceModal = () => {\n    const experienceid = $(SELECTORS.INPUTS.experienceid).val();\n    const seleccionados = [];\n    $(\"#resources-group input[type='checkbox']:checked\").each(function () {\n        // Agregar el valor del checkbox seleccionado al array\n        seleccionados.push($(this).val());\n    });\n    const contextid = [];\n    seleccionados.forEach(async (resourceid) => {\n        contextid.push(\n            upsertContext({\n                component: \"experience\",\n                componentinstance: experienceid,\n                modifier: \"resource\",\n                modifierinstance: resourceid,\n            })\n        );\n    });\n    Promise.all(contextid)\n        .then(() => {\n            window.location.reload();\n            return;\n        })\n        .catch((error) => {\n            Notification.exception(error);\n        });\n};\n\nexport const displaylinkCasesModal = async () => {\n    const { cases } = await getCases();\n\n    const modal = await ModalFactory.create({\n        type: linkCasesModal.TYPE,\n        templateContext: { elementid_: Date.now(), cases },\n        large: true,\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, () => {\n        handleCasesModal();\n    });\n};\n\nconst handleCasesModal = () => {\n    const experienceid = $(SELECTORS.INPUTS.experienceid).val();\n    const seleccionados = [];\n    $(\"#cases-group input[type='checkbox']:checked\").each(function () {\n        seleccionados.push($(this).val());\n    });\n    const contextid = [];\n    seleccionados.forEach(async (caseid) => {\n        contextid.push(\n            upsertContext({\n                component: \"experience\",\n                componentinstance: experienceid,\n                modifier: \"case\",\n                modifierinstance: caseid,\n            })\n        );\n    });\n    Promise.all(contextid)\n        .then(() => {\n            window.location.reload();\n            return;\n        })\n        .catch((error) => {\n            Notification.exception(error);\n        });\n};\n"],"names":["manageModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","register","TYPE","TEMPLATE","linkResourcesModal","linkCasesModal","async","strings","Str","get_strings","key","component","Promise","all","then","_ref","displayManageModal","experienceid","experience","response","languages","prioritizeInstalled","map","language","code","value","name","selected","lang","window","console","log","visibility","item","visible","modal","ModalFactory","create","type","templateContext","title","description","sections","label","placeholder","themes","tags","picture","current","id","large","show","$root","getRoot","on","ModalEvents","save","event","preventDefault","form","querySelector","validateManageRequiredFields","handleManageModalSubmission","formData","Array","from","querySelectorAll","option","addNotification","message","location","href","Cfg","wwwroot","error","exception","requiredFields","field","focus","resources","elementid_","Date","now","change","changeElement","find","get","onclick","hide","handleResourceModal","SELECTORS","INPUTS","val","seleccionados","each","push","this","contextid","forEach","componentinstance","modifier","modifierinstance","resourceid","reload","catch","cases","handleCasesModal","caseid"],"mappings":"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"}