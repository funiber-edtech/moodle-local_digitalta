{"version":3,"file":"form.min.js","sources":["../../../src/myexperience/manage/form.js"],"sourcesContent":["import $ from \"jquery\";\r\nimport Notification from \"core/notification\";\r\nimport {createTinyMCE} from './../../tiny/manage';\r\nimport {setEventListeners} from \"./listeners\";\r\nimport {activateStep} from \"./steps\";\r\nimport {experienceUpsert, createTags} from \"./../../repositories/experience_repository\";\r\nimport {autocompleteTags} from \"local_dta/tags/autocomplete\";\r\nimport { saveFiles } from \"../../files/filemanager\";\r\n\r\n\r\n\r\n/**\r\n * Set event listeners for the module.\r\n * @return {void}\r\n * */\r\nfunction setDefaultTinyMCE() {\r\n  $(\".editor\").each(function() {\r\n    createTinyMCE(this.id);\r\n  });\r\n}\r\n\r\n/**\r\n * Collapse the add section menu.\r\n * @return {void}\r\n */\r\nexport function collapseAddSectionMenu() {\r\n  const importerParent = $(this).closest(\"#importer\");\r\n  const importerDiv = importerParent.find(\"#import_div\");\r\n  const addIcon = $(this).find(\"i\");\r\n  if (importerParent.hasClass(\"collapsed\")) {\r\n    importerParent.removeClass(\"collapsed\");\r\n    importerDiv.css(\"display\", \"flex\");\r\n    addIcon.removeClass(\"fa fa-plus-circle\").addClass(\"fa fa-minus-circle\");\r\n  } else {\r\n    importerParent.addClass(\"collapsed\");\r\n    importerDiv.hide();\r\n    addIcon.removeClass(\"fa fa-minus-circle\").addClass(\"fa fa-plus-circle\");\r\n  }\r\n}\r\n\r\n// /**\r\n//  * Save the text section.\r\n//  * @param {object} btn - The data to save.\r\n//  * @return {void}\r\n//  */\r\n// function saveTextSection(btn) {\r\n//   const data = btn.data();\r\n//   const {target, group, id} = data;\r\n//   const reflectionid = $(\"#reflectionid\").val();\r\n//   const content = window.tinyMCE.get(target).getContent();\r\n//   sectionTextUpsert({ reflectionid, group, content, id })\r\n//     .then(() => {\r\n//       Notification.addNotification({\r\n//         message: \"Section saved successfully.\",\r\n//         type: \"success\",\r\n//       });\r\n//       return;\r\n//     })\r\n//     .fail(Notification.exception);\r\n// }\r\n\r\n/**\r\n * Show save case modal\r\n * @return {void}\r\n */\r\n// async function showImportCase() {\r\n//   const cases = await getCases();\r\n//   const saveModal = await ModalFactory.create({\r\n//     type: ModalFactory.types.SAVE_CANCEL,\r\n//     title: get_string(\"experience_reflection_import_cases_title\", \"local_dta\"),\r\n//     body: Templates.render(\"local_dta/experiences/manage/import-case-modal\", { cases }),\r\n//   });\r\n//   saveModal.setSaveButtonText(\"Import\");\r\n\r\n//   saveModal.getRoot().on(ModalEvents.save, () => {\r\n//     const caseIds = [];\r\n//     const selectedCases = saveModal.getRoot().find(\"input:checked\");\r\n//     selectedCases.each(function () {\r\n//       caseIds.push($(this).val());\r\n//     });\r\n//     saveModal.hide();\r\n//     //eslint-disable-next-line no-console\r\n//     console.log(caseIds);\r\n//   }\r\n//   );\r\n\r\n//   saveModal.show();\r\n// }\r\n\r\n/**\r\n * Handle new tag.\r\n * @param {Array} selectedOptions - The selected options.\r\n * @return {void}\r\n */\r\nexport async function handleNewTag(selectedOptions) {\r\n\r\n  for (var i = 0; i < selectedOptions.length; i++) {\r\n    if (selectedOptions[i].value === \"-1\") {\r\n      selectedOptions[i].label = selectedOptions[i].label.replace(\"Create: \", \"\");\r\n      const {id} = await saveNewTag(selectedOptions[i].label);\r\n      selectedOptions[i].value = parseInt(id);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Save new tag\r\n * @param {string} tagName - The tag name.\r\n * @return {Promise}\r\n */\r\nasync function saveNewTag(tagName) {\r\n  try {\r\n    return await createTags({\r\n      tag: tagName\r\n    });\r\n  } catch (error) {\r\n    return Notification.exception(error);\r\n  }\r\n}\r\n/**\r\n * Save the experience.\r\n * @return {void}\r\n * */\r\nexport async function saveExperience() {\r\n  const experienceTitle = $(\"#experience_title\").val(),\r\n  experienceVisibility = $(\"#experience_visibility\").val(),\r\n    experienceLang = $(\"#experience_lang\").val(),\r\n    experienceIntroduction = window.tinyMCE.get(\"experience_introduction\").getContent(),\r\n    experienceProblem = window.tinyMCE.get(\"experience_problem\").getContent(),\r\n    tags = $(\"#autocomplete_tags\").val();\r\n\r\n    try {\r\n      const response = await experienceUpsert({\r\n        id: 0,\r\n        title: experienceTitle,\r\n        description: experienceIntroduction,\r\n        context: experienceProblem,\r\n        lang: experienceLang,\r\n        visible: experienceVisibility,\r\n        tags\r\n      });\r\n      saveFiles(\"featurePicture\", \"fileManager\", response.experienceid, \"experience_picture\");\r\n      Notification.addNotification({\r\n        message: \"Experience saved successfully.\",\r\n        type: \"success\",\r\n      });\r\n      activateStep(2);\r\n      return;\r\n    } catch (error) {\r\n      Notification.exception(error);\r\n    }\r\n}\r\n\r\n\r\nexport const init = () => {\r\n  setDefaultTinyMCE();\r\n  autocompleteTags();\r\n  activateStep();\r\n  setEventListeners();\r\n};\r\n"],"names":["saveNewTag","tagName","tag","error","Notification","exception","importerParent","this","closest","importerDiv","find","addIcon","hasClass","removeClass","css","addClass","hide","selectedOptions","i","length","value","label","replace","id","parseInt","experienceTitle","val","experienceVisibility","experienceLang","experienceIntroduction","window","tinyMCE","get","getContent","experienceProblem","tags","response","title","description","context","lang","visible","experienceid","addNotification","message","type","each"],"mappings":"+bA8GeA,WAAWC,0BAET,qCAAW,CACtBC,IAAKD,UAEP,MAAOE,cACAC,sBAAaC,UAAUF,iHA1F1BG,gBAAiB,mBAAEC,MAAMC,QAAQ,aACjCC,YAAcH,eAAeI,KAAK,eAClCC,SAAU,mBAAEJ,MAAMG,KAAK,KACzBJ,eAAeM,SAAS,cAC1BN,eAAeO,YAAY,aAC3BJ,YAAYK,IAAI,UAAW,QAC3BH,QAAQE,YAAY,qBAAqBE,SAAS,wBAElDT,eAAeS,SAAS,aACxBN,YAAYO,OACZL,QAAQE,YAAY,sBAAsBE,SAAS,4DA0DpBE,qBAE5B,IAAIC,EAAI,EAAGA,EAAID,gBAAgBE,OAAQD,OACT,OAA7BD,gBAAgBC,GAAGE,MAAgB,CACrCH,gBAAgBC,GAAGG,MAAQJ,gBAAgBC,GAAGG,MAAMC,QAAQ,WAAY,UAClEC,GAACA,UAAYvB,WAAWiB,gBAAgBC,GAAGG,OACjDJ,gBAAgBC,GAAGE,MAAQI,SAASD,0EAwBlCE,iBAAkB,mBAAE,qBAAqBC,MAC/CC,sBAAuB,mBAAE,0BAA0BD,MACjDE,gBAAiB,mBAAE,oBAAoBF,MACvCG,uBAAyBC,OAAOC,QAAQC,IAAI,2BAA2BC,aACvEC,kBAAoBJ,OAAOC,QAAQC,IAAI,sBAAsBC,aAC7DE,MAAO,mBAAE,sBAAsBT,gBAGvBU,eAAiB,2CAAiB,CACtCb,GAAI,EACJc,MAAOZ,gBACPa,YAAaT,uBACbU,QAASL,kBACTM,KAAMZ,eACNa,QAASd,qBACTQ,KAAAA,wCAEQ,iBAAkB,cAAeC,SAASM,aAAc,4CACrDC,gBAAgB,CAC3BC,QAAS,iCACTC,KAAM,wCAEK,GAEb,MAAO1C,6BACME,UAAUF,mHAKT,yBA1IhB,WAAW2C,MAAK,qCACFvC,KAAKgB"}