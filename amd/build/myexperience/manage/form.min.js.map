{"version":3,"file":"form.min.js","sources":["../../../src/myexperience/manage/form.js"],"sourcesContent":["import $ from \"jquery\";\r\nimport Notification from \"core/notification\";\r\nimport {setupForElementId} from \"editor_tiny/editor\";\r\nimport {setEventListeners} from \"./listeners\";\r\nimport {activateStep} from \"./steps\";\r\nimport {experienceUpsert} from \"./../../repositories/experience_repository\";\r\nimport {autocompleteTags} from \"./autocomplete\";\r\n\r\nlet tinyConfig;\r\n\r\n/**\r\n * Create tinyMCE in an area.\r\n * @param {string} area - The id of the area to create tinyMCE in.\r\n * @return {void}\r\n */\r\nfunction createTinyMCE(area) {\r\n  setupForElementId({\r\n    elementId: `${area}`,\r\n    options: tinyConfig,\r\n  });\r\n}\r\n\r\n/**\r\n * Set event listeners for the module.\r\n * @return {void}\r\n * */\r\nfunction setDefaultTinyMCE() {\r\n  $(\".editor\").each(function() {\r\n    createTinyMCE(this.id);\r\n  });\r\n}\r\n\r\n/**\r\n * Set the tinyMCE config.\r\n * @return {void}\r\n */\r\nfunction setTinyConfig() {\r\n  tinyConfig = window.dta_tiny_config;\r\n}\r\n\r\n\r\n/**\r\n * Collapse the add section menu.\r\n * @return {void}\r\n */\r\nexport function collapseAddSectionMenu() {\r\n  const importerParent = $(this).closest(\"#importer\");\r\n  const importerDiv = importerParent.find(\"#import_div\");\r\n  const addIcon = $(this).find(\"i\");\r\n  if (importerParent.hasClass(\"collapsed\")) {\r\n    importerParent.removeClass(\"collapsed\");\r\n    importerDiv.css(\"display\", \"flex\");\r\n    addIcon.removeClass(\"fa fa-plus-circle\").addClass(\"fa fa-minus-circle\");\r\n  } else {\r\n    importerParent.addClass(\"collapsed\");\r\n    importerDiv.hide();\r\n    addIcon.removeClass(\"fa fa-minus-circle\").addClass(\"fa fa-plus-circle\");\r\n  }\r\n}\r\n\r\n// /**\r\n//  * Save the text section.\r\n//  * @param {object} btn - The data to save.\r\n//  * @return {void}\r\n//  */\r\n// function saveTextSection(btn) {\r\n//   const data = btn.data();\r\n//   const {target, group, id} = data;\r\n//   const reflectionid = $(\"#reflectionid\").val();\r\n//   const content = window.tinyMCE.get(target).getContent();\r\n//   sectionTextUpsert({ reflectionid, group, content, id })\r\n//     .then(() => {\r\n//       Notification.addNotification({\r\n//         message: \"Section saved successfully.\",\r\n//         type: \"success\",\r\n//       });\r\n//       return;\r\n//     })\r\n//     .fail(Notification.exception);\r\n// }\r\n\r\n/**\r\n * Show save case modal\r\n * @return {void}\r\n */\r\n// async function showImportCase() {\r\n//   const cases = await getCases();\r\n//   const saveModal = await ModalFactory.create({\r\n//     type: ModalFactory.types.SAVE_CANCEL,\r\n//     title: get_string(\"experience_reflection_import_cases_title\", \"local_dta\"),\r\n//     body: Templates.render(\"local_dta/experiences/manage/import-case-modal\", { cases }),\r\n//   });\r\n//   saveModal.setSaveButtonText(\"Import\");\r\n\r\n//   saveModal.getRoot().on(ModalEvents.save, () => {\r\n//     const caseIds = [];\r\n//     const selectedCases = saveModal.getRoot().find(\"input:checked\");\r\n//     selectedCases.each(function () {\r\n//       caseIds.push($(this).val());\r\n//     });\r\n//     saveModal.hide();\r\n//     //eslint-disable-next-line no-console\r\n//     console.log(caseIds);\r\n//   }\r\n//   );\r\n\r\n//   saveModal.show();\r\n// }\r\n\r\n/**\r\n * Save the experience.\r\n * @return {void}\r\n * */\r\nexport async function saveExperience() {\r\n  const experienceTitle = $(\"#experience_title\").val(),\r\n  experienceVisibility = $(\"#experience_visibility\").val(),\r\n    experienceLang = $(\"#experience_lang\").val(),\r\n    experienceIntroduction = window.tinyMCE.get(\"experience_introduction\").getContent(),\r\n    experienceProblem = window.tinyMCE.get(\"experience_problem\").getContent();\r\n\r\n    try {\r\n      await experienceUpsert({\r\n        id: 0,\r\n        title: experienceTitle,\r\n        description: experienceIntroduction,\r\n        context: experienceProblem,\r\n        lang: experienceLang,\r\n        visible: experienceVisibility\r\n      });\r\n      Notification.addNotification({\r\n        message: \"Experience saved successfully.\",\r\n        type: \"success\",\r\n      });\r\n      activateStep(2);\r\n      return;\r\n    } catch (error) {\r\n      Notification.exception(error);\r\n    }\r\n}\r\n\r\n\r\nexport const init = () => {\r\n  setTinyConfig();\r\n  setEventListeners();\r\n  setDefaultTinyMCE();\r\n  activateStep();\r\n  autocompleteTags();\r\n};\r\n"],"names":["tinyConfig","setDefaultTinyMCE","each","area","this","id","elementId","options","importerParent","closest","importerDiv","find","addIcon","hasClass","removeClass","css","addClass","hide","experienceTitle","val","experienceVisibility","experienceLang","experienceIntroduction","window","tinyMCE","get","getContent","experienceProblem","title","description","context","lang","visible","addNotification","message","type","error","exception","dta_tiny_config"],"mappings":"+XAQIA,oBAkBKC,wCACL,WAAWC,MAAK,eAZGC,KAAAA,KAaLC,KAAKC,iCAZH,CAChBC,oBAAcH,MACdI,QAASP,yHA4BLQ,gBAAiB,mBAAEJ,MAAMK,QAAQ,aACjCC,YAAcF,eAAeG,KAAK,eAClCC,SAAU,mBAAER,MAAMO,KAAK,KACzBH,eAAeK,SAAS,cAC1BL,eAAeM,YAAY,aAC3BJ,YAAYK,IAAI,UAAW,QAC3BH,QAAQE,YAAY,qBAAqBE,SAAS,wBAElDR,eAAeQ,SAAS,aACxBN,YAAYO,OACZL,QAAQE,YAAY,sBAAsBE,SAAS,2FA0D/CE,iBAAkB,mBAAE,qBAAqBC,MAC/CC,sBAAuB,mBAAE,0BAA0BD,MACjDE,gBAAiB,mBAAE,oBAAoBF,MACvCG,uBAAyBC,OAAOC,QAAQC,IAAI,2BAA2BC,aACvEC,kBAAoBJ,OAAOC,QAAQC,IAAI,sBAAsBC,8BAGrD,2CAAiB,CACrBrB,GAAI,EACJuB,MAAOV,gBACPW,YAAaP,uBACbQ,QAASH,kBACTI,KAAMV,eACNW,QAASZ,6CAEEa,gBAAgB,CAC3BC,QAAS,iCACTC,KAAM,wCAEK,GAEb,MAAOC,6BACMC,UAAUD,mHAKT,KAxGlBpC,WAAauB,OAAOe,mDA2GpBrC"}