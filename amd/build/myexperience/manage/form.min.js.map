<<<<<<< HEAD
{"version":3,"file":"form.min.js","sources":["../../../src/myexperience/manage/form.js"],"sourcesContent":["import $ from \"jquery\";\r\nimport Notification from \"core/notification\";\r\nimport { createTinyMCE, getTinyMCEContent } from \"./../../tiny/manage\";\r\nimport { setEventListeners } from \"./listeners\";\r\nimport { activateStep } from \"./steps\";\r\nimport { experienceUpsert } from \"local_dta/repositories/experience_repository\";\r\nimport { sectionTextUpsert } from \"local_dta/repositories/reflection_repository\";\r\nimport { autocompleteTags } from \"local_dta/tags/autocomplete\";\r\nimport { saveFiles, init as fileManagerInit } from \"../../files/filemanager\";\r\n\r\n/**\r\n * Set event listeners for the module.\r\n * @return {void}\r\n * */\r\nfunction setDefaultTinyMCE() {\r\n  $(\".editor\").each(function () {\r\n    createTinyMCE(this.id);\r\n  });\r\n}\r\n\r\n/**\r\n * Collapse the add section menu.\r\n * @return {void}\r\n */\r\nexport function collapseAddSectionMenu() {\r\n  const importerParent = $(this).closest(\"#importer\");\r\n  const importerDiv = importerParent.find(\"#import_div\");\r\n  const addIcon = $(this).find(\"i\");\r\n  if (importerParent.hasClass(\"collapsed\")) {\r\n    importerParent.removeClass(\"collapsed\");\r\n    importerDiv.css(\"display\", \"flex\");\r\n    addIcon.removeClass(\"fa fa-plus-circle\").addClass(\"fa fa-minus-circle\");\r\n  } else {\r\n    importerParent.addClass(\"collapsed\");\r\n    importerDiv.hide();\r\n    addIcon.removeClass(\"fa fa-minus-circle\").addClass(\"fa fa-plus-circle\");\r\n  }\r\n}\r\n\r\n/**\r\n * Save the text section.\r\n * @param {object} btn - The data to save.\r\n * @param {number} step - The step to activate.\r\n * @return {void}\r\n */\r\nexport function saveTextSection(btn, step) {\r\n  const data = btn.data();\r\n  const { target, group } = data;\r\n  const reflectionid = $(\"#reflectionid\").val();\r\n  const content = getTinyMCEContent(target);\r\n\r\n  sectionTextUpsert({ reflectionid, group, content })\r\n    .then(() => {\r\n      Notification.addNotification({\r\n        message: \"Section saved successfully.\",\r\n        type: \"success\",\r\n      });\r\n      activateStep(step + 1);\r\n      return;\r\n    })\r\n    .fail(Notification.exception);\r\n}\r\n\r\n/**\r\n * Show save case modal\r\n * @return {void}\r\n */\r\n// async function showImportCase() {\r\n//   const cases = await getCases();\r\n//   const saveModal = await ModalFactory.create({\r\n//     type: ModalFactory.types.SAVE_CANCEL,\r\n//     title: get_string(\"experience_reflection_import_cases_title\", \"local_dta\"),\r\n//     body: Templates.render(\"local_dta/experiences/manage/import-case-modal\", { cases }),\r\n//   });\r\n//   saveModal.setSaveButtonText(\"Import\");\r\n\r\n//   saveModal.getRoot().on(ModalEvents.save, () => {\r\n//     const caseIds = [];\r\n//     const selectedCases = saveModal.getRoot().find(\"input:checked\");\r\n//     selectedCases.each(function () {\r\n//       caseIds.push($(this).val());\r\n//     });\r\n//     saveModal.hide();\r\n//     //eslint-disable-next-line no-console\r\n//     console.log(caseIds);\r\n//   }\r\n//   );\r\n\r\n//   saveModal.show();\r\n// }\r\n\r\n/**\r\n * Save the experience.\r\n * @return {void}\r\n * */\r\nexport async function saveExperience() {\r\n  const experienceTitle = $(\"#experience_title\").val(),\r\n    experienceVisibility = $(\"#experience_visibility\").val(),\r\n    experienceLang = $(\"#experience_lang\").val(),\r\n    experienceIntroduction = window.tinyMCE.get(\"experience_introduction\").getContent(),\r\n    experienceProblem = window.tinyMCE.get(\"experience_problem\").getContent(),\r\n    tags = $(\"#autocomplete_tags\").val();\r\n\r\n    try {\r\n      const response = await experienceUpsert({\r\n        id: 0,\r\n        title: experienceTitle,\r\n        description: experienceIntroduction,\r\n        context: experienceProblem,\r\n        lang: experienceLang,\r\n        visible: experienceVisibility,\r\n        tags,\r\n      });\r\n      await saveFiles(\"featurePicture\", \"fileManager\", response.experienceid, \"experience_picture\");\r\n\r\n      Notification.addNotification({\r\n        message: \"Experience saved successfully.\",\r\n        type: \"success\",\r\n      });\r\n\r\n      activateStep(2);\r\n      $(\"#reflectionid\").val(response.reflectionid);\r\n    } catch (error) {\r\n      Notification.exception(error);\r\n    }\r\n}\r\n\r\nexport const init = () => {\r\n  fileManagerInit(\"featurePicture\");\r\n  setDefaultTinyMCE();\r\n  autocompleteTags(\"#autocomplete_tags\");\r\n  activateStep();\r\n  setEventListeners();\r\n};\r\n"],"names":["importerParent","this","closest","importerDiv","find","addIcon","hasClass","removeClass","css","addClass","hide","experienceTitle","val","experienceVisibility","experienceLang","experienceIntroduction","window","tinyMCE","get","getContent","experienceProblem","tags","response","id","title","description","context","lang","visible","experienceid","addNotification","message","type","reflectionid","error","exception","btn","step","data","target","group","content","then","fail","Notification","each"],"mappings":"imBAyBQA,gBAAiB,mBAAEC,MAAMC,QAAQ,aACjCC,YAAcH,eAAeI,KAAK,eAClCC,SAAU,mBAAEJ,MAAMG,KAAK,KACzBJ,eAAeM,SAAS,cAC1BN,eAAeO,YAAY,aAC3BJ,YAAYK,IAAI,UAAW,QAC3BH,QAAQE,YAAY,qBAAqBE,SAAS,wBAElDT,eAAeS,SAAS,aACxBN,YAAYO,OACZL,QAAQE,YAAY,sBAAsBE,SAAS,2FA6D/CE,iBAAkB,mBAAE,qBAAqBC,MAC7CC,sBAAuB,mBAAE,0BAA0BD,MACnDE,gBAAiB,mBAAE,oBAAoBF,MACvCG,uBAAyBC,OAAOC,QAAQC,IAAI,2BAA2BC,aACvEC,kBAAoBJ,OAAOC,QAAQC,IAAI,sBAAsBC,aAC7DE,MAAO,mBAAE,sBAAsBT,gBAGvBU,eAAiB,2CAAiB,CACtCC,GAAI,EACJC,MAAOb,gBACPc,YAAaV,uBACbW,QAASN,kBACTO,KAAMb,eACNc,QAASf,qBACTQ,KAAAA,aAEI,0BAAU,iBAAkB,cAAeC,SAASO,aAAc,4CAE3DC,gBAAgB,CAC3BC,QAAS,iCACTC,KAAM,oCAGK,uBACX,iBAAiBpB,IAAIU,SAASW,cAChC,MAAOC,6BACMC,UAAUD,2CA9EGE,IAAKC,YAC7BC,KAAOF,IAAIE,QACXC,OAAEA,OAAFC,MAAUA,OAAUF,KACpBL,cAAe,mBAAE,iBAAiBrB,MAClC6B,SAAU,6BAAkBF,qDAEhB,CAAEN,aAAAA,aAAcO,MAAAA,MAAOC,QAAAA,UACtCC,MAAK,2BACSZ,gBAAgB,CAC3BC,QAAS,8BACTC,KAAM,oCAEKK,KAAO,MAGrBM,KAAKC,sBAAaT,sHAmEH,2BACF,sCAjHd,WAAWU,MAAK,qCACF5C,KAAKsB,0CAkHJ"}
=======
{"version":3,"file":"form.min.js","sources":["../../../src/myexperience/manage/form.js"],"sourcesContent":["import $ from \"jquery\";\nimport Notification from \"core/notification\";\nimport { createTinyMCE, getTinyMCEContent } from \"./../../tiny/manage\";\nimport { setEventListeners } from \"./listeners\";\nimport { activateStep } from \"./steps\";\nimport { experienceUpsert } from \"local_dta/repositories/experience_repository\";\nimport { sectionTextUpsert } from \"local_dta/repositories/reflection_repository\";\nimport { autocompleteTags } from \"local_dta/tags/autocomplete\";\nimport { saveFiles } from \"../../files/filemanager\";\n\n/**\n * Set event listeners for the module.\n * @return {void}\n * */\nfunction setDefaultTinyMCE() {\n  $(\".editor\").each(function () {\n    createTinyMCE(this.id);\n  });\n}\n\n/**\n * Collapse the add section menu.\n * @return {void}\n */\nexport function collapseAddSectionMenu() {\n  const importerParent = $(this).closest(\"#importer\");\n  const importerDiv = importerParent.find(\"#import_div\");\n  const addIcon = $(this).find(\"i\");\n  if (importerParent.hasClass(\"collapsed\")) {\n    importerParent.removeClass(\"collapsed\");\n    importerDiv.css(\"display\", \"flex\");\n    addIcon.removeClass(\"fa fa-plus-circle\").addClass(\"fa fa-minus-circle\");\n  } else {\n    importerParent.addClass(\"collapsed\");\n    importerDiv.hide();\n    addIcon.removeClass(\"fa fa-minus-circle\").addClass(\"fa fa-plus-circle\");\n  }\n}\n\n/**\n * Save the text section.\n * @param {object} btn - The data to save.\n * @param {number} step - The step to activate.\n * @return {void}\n */\nexport function saveTextSection(btn, step) {\n  const data = btn.data();\n  const { target, group } = data;\n  const reflectionid = $(\"#reflectionid\").val();\n  const content = getTinyMCEContent(target);\n\n  sectionTextUpsert({ reflectionid, group, content })\n    .then(() => {\n      Notification.addNotification({\n        message: \"Section saved successfully.\",\n        type: \"success\",\n      });\n      activateStep(step + 1);\n      return;\n    })\n    .fail(Notification.exception);\n}\n\n/**\n * Show save case modal\n * @return {void}\n */\n// async function showImportCase() {\n//   const cases = await getCases();\n//   const saveModal = await ModalFactory.create({\n//     type: ModalFactory.types.SAVE_CANCEL,\n//     title: get_string(\"experience_reflection_import_cases_title\", \"local_dta\"),\n//     body: Templates.render(\"local_dta/experiences/manage/import-case-modal\", { cases }),\n//   });\n//   saveModal.setSaveButtonText(\"Import\");\n\n//   saveModal.getRoot().on(ModalEvents.save, () => {\n//     const caseIds = [];\n//     const selectedCases = saveModal.getRoot().find(\"input:checked\");\n//     selectedCases.each(function () {\n//       caseIds.push($(this).val());\n//     });\n//     saveModal.hide();\n//     //eslint-disable-next-line no-console\n//     console.log(caseIds);\n//   }\n//   );\n\n//   saveModal.show();\n// }\n\n/**\n * Save the experience.\n * @return {void}\n * */\nexport async function saveExperience() {\n  const experienceTitle = $(\"#experience_title\").val(),\n    experienceVisibility = $(\"#experience_visibility\").val(),\n    experienceLang = $(\"#experience_lang\").val(),\n    experienceIntroduction = window.tinyMCE.get(\"experience_introduction\").getContent(),\n    experienceProblem = window.tinyMCE.get(\"experience_problem\").getContent(),\n    experienceid = $(\"#experience_id\").val(),\n    tags = $(\"#autocomplete_tags\").val();\n\n    try {\n      const response = await experienceUpsert({\n        id: experienceid ? experienceid : 0,\n        title: experienceTitle,\n        description: experienceIntroduction,\n        context: experienceProblem,\n        lang: experienceLang,\n        visible: experienceVisibility,\n        tags,\n      });\n      await saveFiles(\"featurePicture\", \"fileManager\", response.experienceid, \"experience_picture\");\n\n      Notification.addNotification({\n        message: \"Experience saved successfully.\",\n        type: \"success\",\n      });\n\n      activateStep(2);\n      $(\"#reflectionid\").val(response.reflectionid);\n    } catch (error) {\n      Notification.exception(error);\n    }\n}\n\nexport const init = () => {\n  setDefaultTinyMCE();\n  autocompleteTags(\"#autocomplete_tags\");\n  activateStep();\n  setEventListeners();\n};\n"],"names":["importerParent","this","closest","importerDiv","find","addIcon","hasClass","removeClass","css","addClass","hide","experienceTitle","val","experienceVisibility","experienceLang","experienceIntroduction","window","tinyMCE","get","getContent","experienceProblem","experienceid","tags","response","id","title","description","context","lang","visible","addNotification","message","type","reflectionid","error","exception","btn","step","data","target","group","content","then","fail","Notification","each"],"mappings":"imBAyBQA,gBAAiB,mBAAEC,MAAMC,QAAQ,aACjCC,YAAcH,eAAeI,KAAK,eAClCC,SAAU,mBAAEJ,MAAMG,KAAK,KACzBJ,eAAeM,SAAS,cAC1BN,eAAeO,YAAY,aAC3BJ,YAAYK,IAAI,UAAW,QAC3BH,QAAQE,YAAY,qBAAqBE,SAAS,wBAElDT,eAAeS,SAAS,aACxBN,YAAYO,OACZL,QAAQE,YAAY,sBAAsBE,SAAS,2FA6D/CE,iBAAkB,mBAAE,qBAAqBC,MAC7CC,sBAAuB,mBAAE,0BAA0BD,MACnDE,gBAAiB,mBAAE,oBAAoBF,MACvCG,uBAAyBC,OAAOC,QAAQC,IAAI,2BAA2BC,aACvEC,kBAAoBJ,OAAOC,QAAQC,IAAI,sBAAsBC,aAC7DE,cAAe,mBAAE,kBAAkBT,MACnCU,MAAO,mBAAE,sBAAsBV,gBAGvBW,eAAiB,2CAAiB,CACtCC,GAAIH,cAA8B,EAClCI,MAAOd,gBACPe,YAAaX,uBACbY,QAASP,kBACTQ,KAAMd,eACNe,QAAShB,qBACTS,KAAAA,aAEI,0BAAU,iBAAkB,cAAeC,SAASF,aAAc,4CAE3DS,gBAAgB,CAC3BC,QAAS,iCACTC,KAAM,oCAGK,uBACX,iBAAiBpB,IAAIW,SAASU,cAChC,MAAOC,6BACMC,UAAUD,2CA/EGE,IAAKC,YAC7BC,KAAOF,IAAIE,QACXC,OAAEA,OAAFC,MAAUA,OAAUF,KACpBL,cAAe,mBAAE,iBAAiBrB,MAClC6B,SAAU,6BAAkBF,qDAEhB,CAAEN,aAAAA,aAAcO,MAAAA,MAAOC,QAAAA,UACtCC,MAAK,2BACSZ,gBAAgB,CAC3BC,QAAS,8BACTC,KAAM,oCAEKK,KAAO,MAGrBM,KAAKC,sBAAaT,sHAoEH,yBAjHhB,WAAWU,MAAK,qCACF5C,KAAKuB,0CAkHJ"}
>>>>>>> ca32237ed3186a14d44319c332b75effb05b8ec0
