{"version":3,"file":"modals.min.js","sources":["../../src/resources/modals.js"],"sourcesContent":["import {\n    autocompleteThemes\n} from \"local_digitalta/themes/autocomplete\";\nimport {\n    autocompleteTags\n} from \"local_digitalta/tags/autocomplete\";\nimport {\n    createTinyMCE,\n    getTinyMCEContent\n} from \"local_digitalta/tiny/manage\";\nimport {\n    displayLinkResourceModal,\n    displayLinkResourcesModal\n} from \"local_digitalta/experiences/modals\";\nimport {\n    experiencesGet\n} from \"local_digitalta/repositories/experiences_repository\";\nimport {\n    getList\n} from \"core/normalise\";\nimport {\n    languagesGet\n} from \"local_digitalta/repositories/languages_repository\";\nimport {\n    resourcesGet,\n    resourcesUpsert,\n    resourcesTypesGet\n} from \"local_digitalta/repositories/resources_repository\";\nimport Modal from 'core/modal';\nimport ModalEvents from \"core/modal_events\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalRegistry from 'core/modal_registry';\nimport Notification from \"core/notification\";\n\nconst manageResourcesModal = class extends Modal {\n    static TYPE = 'local_digitalta/manageResourcesModal';\n    static TEMPLATE = 'local_digitalta/resources/modals/modal-manage';\n    registerEventListeners() {\n        super.registerEventListeners();\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n};\nModalRegistry.register(manageResourcesModal.TYPE, manageResourcesModal, manageResourcesModal.TEMPLATE);\n\n/**\n * Show the add resources modal.\n *\n * @param {Number} resourceid\n * @param {Number} experienceid\n */\nexport const showManageResourcesModal = async (resourceid = null, experienceid = null) => {\n    // Types\n    const types = await resourcesTypesGet().then((response) => { return response.types; });\n    // Languages\n    const languages = await languagesGet({prioritizeInstalled: true});\n    // Resource\n    const resource = resourceid === null\n        ? {}\n        : await resourcesGet({id: resourceid}).then((response) => { return response.resources[0]; });\n    // Experience\n    const experience = experienceid === null\n        ? Promise.resolve({})\n        : await experiencesGet(experienceid).then((response) => response.experience);\n    Promise.all([languages, resource, experience])\n        .then(([languages, resource, experience]) =>\n            displayManageResourcesModal(types, languages, resource, experience));\n};\n\n/**\n * Display the add resource modal.\n *\n * @param {Array} types\n * @param {Array} languages\n * @param {Object} resource\n * @param {Object} experience\n */\nexport const displayManageResourcesModal = async (types, languages, resource = {}, experience = {}) => {\n    // Languages\n    let anyLanguageSelected = false;\n    languages = languages.map((language) => {\n        language.selected = false;\n        if (resource.hasOwnProperty('lang') && language.code === resource.lang) {\n            language.selected = anyLanguageSelected = true;\n        }\n        return {\n            key: language.code,\n            value: language.name,\n            selected: language.selected\n        };\n    });\n    if (!anyLanguageSelected) {\n        languages[0].selected = true;\n    }\n    languages[0].selected = true;\n    // Types\n    let anyTypeSelected = false;\n    types = types.map((type) => {\n        type.selected = false;\n        if (resource.hasOwnProperty('type') && type.id === resource.type) {\n            type.selected = anyTypeSelected = true;\n        }\n        return {\n            key: type.id,\n            value: type.name,\n            selected: type.selected\n        };\n    });\n    if (!anyTypeSelected) {\n        types[0].selected = true;\n    }\n    const modal = await ModalFactory.create({\n        type: manageResourcesModal.TYPE,\n        templateContext: {\n            experienceid: experience.id,\n            languages: languages,\n            types: types,\n            current: {\n                id: resource.id ?? 0,\n                name: resource.name ?? null,\n                path: resource.path ?? null,\n                description: resource.description ?? null,\n                themes: resource.themes ?? [],\n                tags: resource.tags ?? [],\n                type: resource.type ?? null,\n                format: resource.format ?? 'Link'\n            }\n        },\n        large: true,\n        removeOnClose: true\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    createTinyMCE('resource-manage-description');\n    autocompleteTags('#resource-manage-tags');\n    autocompleteThemes('#resource-manage-themes');\n    if (experience) {\n        const changeElement = $root.find(\"#changeToImportResource\").get(0);\n        if (changeElement) {\n            changeElement.onclick = () => {\n                displayLinkResourcesModal(true);\n                modal.destroy();\n            };\n        }\n    }\n    $root.on(ModalEvents.save, (event, modal) => {\n        event.preventDefault();\n        const form = $root[0].querySelector('form');\n        if (validateManageRequiredFields(form)) {\n            handleManageResourcesModalSubmission(event, modal);\n        }\n    });\n};\n\n/**\n * Handle the submission of the dialogue.\n *\n * @param {Event} event\n * @param {Modal} modal\n */\nconst handleManageResourcesModalSubmission = async (event, modal) => {\n    const form = getList(modal.getRoot())[0].querySelector(\"form\");\n\n    if (!form) {\n        return;\n    }\n    const experienceid = form.querySelector('input[name=\"resource-manage-experienceid\"]').value;\n    const formData = {\n        id: form.querySelector('input[name=\"resource-manage-id\"]').value,\n        name: form.querySelector('input[name=\"resource-manage-name\"]').value,\n        description: getTinyMCEContent('resource-manage-description'),\n        type: form.querySelector('select[name=\"resource-manage-type\"]').value,\n        format: form.querySelector('input[name=\"resource-manage-format\"]').value,\n        path: form.querySelector('input[name=\"resource-manage-path\"]').value,\n        lang: form.querySelector('select[name=\"resource-manage-language\"]').value,\n        themes: Array.from(\n            form.querySelectorAll('select[name=\"resource-manage-themes\"] option:checked'),\n            option => option.value),\n        tags: Array.from(\n            form.querySelectorAll('select[name=\"resource-manage-tags\"] option:checked'),\n            option => option.value)\n    };\n    try {\n        const resourceid = await resourcesUpsert(formData).then((response) => { return response.resourceid; });\n        Notification.addNotification({\n            message: \"Resource saved successfully.\",\n            type: 'success'\n        });\n        if (experienceid) {\n            displayLinkResourceModal(experienceid, resourceid);\n            return;\n        }\n        location.reload();\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Validate required fields.\n *\n * @param {HTMLElement} form The form to validate.\n * @return {boolean} True if all required fields are filled.\n */\nconst validateManageRequiredFields = (form) => {\n    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');\n    for (const field of requiredFields) {\n        if (!field.value) {\n            field.focus();\n            return false;\n        }\n    }\n    return true;\n};\n"],"names":["manageResourcesModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","register","TYPE","TEMPLATE","async","resourceid","experienceid","types","then","response","languages","prioritizeInstalled","resource","id","resources","experience","Promise","resolve","all","_ref","displayManageResourcesModal","anyLanguageSelected","map","language","selected","hasOwnProperty","code","lang","key","value","name","anyTypeSelected","type","modal","ModalFactory","create","templateContext","current","path","description","themes","tags","format","large","removeOnClose","show","$root","getRoot","changeElement","find","get","onclick","destroy","on","ModalEvents","save","event","preventDefault","form","querySelector","validateManageRequiredFields","handleManageResourcesModalSubmission","formData","Array","from","querySelectorAll","option","addNotification","message","location","reload","error","exception","requiredFields","field","focus"],"mappings":"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"}