{"version":3,"file":"main.min.js","sources":["../../src/chat/main.js"],"sourcesContent":["import $ from 'jquery';\nimport Template from 'core/templates';\nimport Notification from 'core/notification';\nimport SELECTORS from 'local_digitalta/chat/selectors';\nimport { chatsGetRooms, chatsSendMessage, chatsGetMessage } from 'local_digitalta/repositories/chat_repository';\nimport setEventListeners from 'local_digitalta/chat/listeners';\nimport Status from 'local_digitalta/chat/status';\nimport tutorHandler from 'local_digitalta/tutors/experience_view/main';\n\nconst status = new Status();\n\n/**\n * Create a chat in the target\n * @param {string} target\n * @param {int} experienceid\n */\nexport default function createChatInTarget(target, experienceid = null) {\n    SELECTORS.TARGET = target;\n    initComponent(experienceid);\n    return;\n}\n\n/**\n * Initialize chat component\n * @param {*} experienceid\n */\nconst initComponent = (experienceid) => {\n    setEventListeners();\n    if (experienceid) {\n        openChatFromExperience(experienceid);\n    } else {\n        renderMenuChat();\n    }\n    setInterval(reloaderMessages, 1000);\n    tutorHandler();\n};\n\n/**\n * Render menu chat\n */\nexport async function renderMenuChat() {\n    const { chatrooms } = await chatsGetRooms({experienceid: 0});\n    Template.render(SELECTORS.TEMPLATES.MENU_CHAT, {\n        chatrooms\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        status.emptyActiveMessages();\n        SELECTORS.OPEN_CHAT_ID = 0;\n        tutorHandler();\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Open chat\n * @param {number} id\n * @param {boolean} hideBack\n * Render chat\n */\nexport async function renderChat(id, hideBack = false) {\n    const { messages } = await chatsGetMessage({ chatid: id });\n    SELECTORS.OPEN_CHAT_ID = id;\n    Template.render(SELECTORS.TEMPLATES.CHAT, {\n        hideBack\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        handlerMessages(messages);\n        status.activeMessages = messages;\n        return;\n    }).fail(Notification.exception);\n}\n\n\n/**\n * Render messages in chat\n * @param {Array} messages\n */\nexport async function handlerMessages(messages) {\n    let html = '';\n    const promises = messages.map((msg) => {\n        const { message, timecreated, is_mine, userfullname, userpicture} = msg;\n        return renderMessage(message, timecreated, is_mine, userfullname, userpicture);\n    });\n    try {\n        html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).html(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n/**\n * Reload messages\n */\nexport async function reloaderMessages() {\n    if (SELECTORS.OPEN_CHAT_ID) {\n        const { messages } = await chatsGetMessage({ chatid: SELECTORS.OPEN_CHAT_ID });\n        handlerNewOtherMessage(messages);\n        return;\n    }\n}\n\n/**\n * Handler new other message\n * @param {object} messages\n */\nexport async function handlerNewOtherMessage(messages) {\n    const newMessages = findDefferencies(messages, status.activeMessages);\n    const promises = newMessages.map((msg) => {\n        const { message, timecreated, is_mine, userfullname, userpicture } = msg;\n        status.activeMessages.push(msg);\n        return renderMessage(message, timecreated, is_mine, userfullname, userpicture);\n    });\n    try {\n        const html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Check if two objects are equals\n * @param {Array} arr1\n * @param {Array} arr2\n * @returns {Array}\n */\nfunction findDefferencies(arr1, arr2) {\n    return arr1.filter(objeto1 => {\n        return !arr2.some(objeto2 => areEqualsByid(objeto1, objeto2));\n    });\n}\n\n/**\n * Check if two objects are equals\n * @param {object} objeto1\n * @param {object} objeto2\n * @returns {boolean}\n */\nfunction areEqualsByid(objeto1, objeto2) {\n    return objeto1.message === objeto2.message && objeto1.timecreated === objeto2.timecreated;\n}\n\n/**\n * Render my message\n * @param {string} text\n * @param {string} time\n * @param {boolean} mine\n * @param {string} userfullname\n * @param {string} userpicture\n * @returns {Promise}\n */\nexport async function renderMessage(text, time, mine, userfullname = '', userpicture = '') {\n    const TEMPLATE = mine ? SELECTORS.TEMPLATES.MY_MESSAGE : SELECTORS.TEMPLATES.OTHER_MESSAGE;\n    const timeInMilliseconds = time * 1000;\n    let dateString = '';\n    if (timeInMilliseconds < (Date.now() - (86400000))) {\n        dateString = new Date(timeInMilliseconds).toLocaleDateString();\n    }\n    const timeString =  new Date(time*1000).toLocaleTimeString([], { hour12: false, hour: '2-digit', minute: '2-digit' });\n    const dateTimeString = dateString ? `${dateString} ${timeString}` : timeString;\n    return Template.render(TEMPLATE, {text, time: dateTimeString, userfullname, userpicture});\n}\n\n/**\n * Handle send message\n * @returns {Promise}\n */\nexport async function handleSendMessage() {\n    const message = $(SELECTORS.INPUTS.CHAT_REPLY).val().trim();\n    chatsSendMessage({\n        chatid: SELECTORS.OPEN_CHAT_ID,\n        message,\n    }).then(() => {\n        $(SELECTORS.INPUTS.CHAT_REPLY).val('');\n        addNewMessage(message);\n        return;\n    }).fail(Notification.exception);\n    return;\n}\n\n/**\n * Add new message\n * @param {string} message\n */\nasync function addNewMessage(message) {\n    const date = Math.floor(Date.now() / 1000);\n    const html = await renderMessage(message, date, true);\n    status.activeMessages.push({\n        message,\n        timecreated: date,\n        is_mine: true\n    });\n\n    $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n}\n\n/**\n * Open chat from experience\n * @param {int} experienceid\n */\nexport async function openChatFromExperience(experienceid) {\n    const {chatrooms} = await chatsGetRooms({experienceid});\n    renderChat(chatrooms[0].id, true);\n}\n\n/**\n * Render menu tutor\n * @returns {Promise}\n */\nexport async function renderMenuTutor() {\n    Template.render(SELECTORS.TEMPLATES.MENU_MENTOR, {}).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        return;\n    }).fail(Notification.exception);\n}"],"names":["target","experienceid","TARGET","initComponent","message","SELECTORS","INPUTS","CHAT_REPLY","val","trim","chatid","OPEN_CHAT_ID","then","date","Math","floor","Date","now","html","renderMessage","status","activeMessages","push","timecreated","is_mine","CONTAINERS","MESSAGES","append","addNewMessage","fail","Notification","exception","render","TEMPLATES","MENU_MENTOR","Status","openChatFromExperience","renderMenuChat","setInterval","reloaderMessages","chatrooms","MENU_CHAT","emptyActiveMessages","renderChat","id","hideBack","messages","CHAT","handlerMessages","promises","map","msg","userfullname","userpicture","Promise","all","join","error","handlerNewOtherMessage","arr1","arr2","filter","objeto1","some","objeto2","areEqualsByid","text","time","mine","TEMPLATE","MY_MESSAGE","OTHER_MESSAGE","timeInMilliseconds","dateString","toLocaleDateString","timeString","toLocaleTimeString","hour12","hour","minute","dateTimeString","Template"],"mappings":"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"}