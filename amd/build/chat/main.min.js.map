{"version":3,"file":"main.min.js","sources":["../../src/chat/main.js"],"sourcesContent":["import $ from 'jquery';\nimport Template from 'core/templates';\nimport Notification from 'core/notification';\nimport SELECTORS from 'local_digitalta/chat/selectors';\nimport { chatsGetRooms, chatsSendMessage, chatsGetMessage } from 'local_digitalta/repositories/chat_repository';\nimport setEventListeners from 'local_digitalta/chat/listeners';\nimport Status from 'local_digitalta/chat/status';\nimport tutorHandler from 'local_digitalta/tutors/experience_view/main';\n\nconst status = new Status();\n\n/**\n * Create a chat in the target\n * @param {string} target\n * @param {int} experienceid\n */\nexport default function createChatInTarget(target, experienceid = null) {\n    SELECTORS.TARGET = target;\n    initComponent(experienceid);\n    return;\n}\n\n/**\n * Initialize chat component\n * @param {*} experienceid\n */\nconst initComponent = (experienceid) => {\n    setEventListeners();\n    if (experienceid) {\n        openChatFromExperience(experienceid);\n    } else {\n        renderMenuChat();\n    }\n    setInterval(reloaderMessages, 1000);\n    tutorHandler();\n};\n\n/**\n * Render menu chat\n */\nexport async function renderMenuChat() {\n    const { chatrooms } = await chatsGetRooms({experienceid: 0});\n    Template.render(SELECTORS.TEMPLATES.MENU_CHAT, {\n        chatrooms\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        status.emptyActiveMessages();\n        SELECTORS.OPEN_CHAT_ID = 0;\n        tutorHandler();\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Open chat\n * @param {number} id\n * @param {boolean} hideBack\n * Render chat\n */\nexport async function renderChat(id, hideBack = false) {\n    const { messages } = await chatsGetMessage({ chatid: id });\n    SELECTORS.OPEN_CHAT_ID = id;\n    Template.render(SELECTORS.TEMPLATES.CHAT, {\n        hideBack\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        handlerMessages(messages);\n        status.activeMessages = messages;\n        return;\n    }).fail(Notification.exception);\n}\n\n\n/**\n * Render messages in chat\n * @param {Array} messages\n */\nexport async function handlerMessages(messages) {\n    let html = '';\n    const promises = messages.map((msg) => {\n        const { message, timecreated, is_mine } = msg;\n        return renderMessage(message, timecreated, is_mine);\n    });\n    try {\n        html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).html(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n/**\n * Reload messages\n */\nexport async function reloaderMessages() {\n    if (SELECTORS.OPEN_CHAT_ID) {\n        const { messages } = await chatsGetMessage({ chatid: SELECTORS.OPEN_CHAT_ID });\n        handlerNewOtherMessage(messages);\n        return;\n    }\n}\n\n/**\n * Handler new other message\n * @param {object} messages\n */\nexport async function handlerNewOtherMessage(messages) {\n    const newMessages = findDefferencies(messages, status.activeMessages);\n    const promises = newMessages.map((msg) => {\n        const { message, timecreated, is_mine } = msg;\n        status.activeMessages.push(msg);\n        return renderMessage(message, timecreated, is_mine);\n    });\n    try {\n        const html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Check if two objects are equals\n * @param {Array} arr1\n * @param {Array} arr2\n * @returns {Array}\n */\nfunction findDefferencies(arr1, arr2) {\n    return arr1.filter(objeto1 => {\n        return !arr2.some(objeto2 => areEqualsByid(objeto1, objeto2));\n    });\n}\n\n/**\n * Check if two objects are equals\n * @param {object} objeto1\n * @param {object} objeto2\n * @returns {boolean}\n */\nfunction areEqualsByid(objeto1, objeto2) {\n    return objeto1.message === objeto2.message;\n}\n\n/**\n * Render my message\n * @param {string} text\n * @param {string} time\n * @param {boolean} mine\n * @returns {Promise}\n */\nexport async function renderMessage(text, time, mine) {\n    const TEMPLATE = mine ? SELECTORS.TEMPLATES.MY_MESSAGE : SELECTORS.TEMPLATES.OTHER_MESSAGE;\n    return Template.render(TEMPLATE, { text, time });\n}\n\n/**\n * Handle send message\n * @returns {Promise}\n */\nexport async function handleSendMessage() {\n    const message = $(SELECTORS.INPUTS.CHAT_REPLY).val().trim();\n    chatsSendMessage({\n        chatid: SELECTORS.OPEN_CHAT_ID,\n        message,\n    }).then(() => {\n        $(SELECTORS.INPUTS.CHAT_REPLY).val('');\n        addNewMessage(message);\n        return;\n    }).fail(Notification.exception);\n    return;\n}\n\n/**\n * Add new message\n * @param {string} message\n */\nasync function addNewMessage(message) {\n    const date = new Date().toLocaleTimeString('es-ES', { hour12: false, hour: '2-digit', minute: '2-digit' });\n    const html = await renderMessage(message, date, true);\n    status.activeMessages.push({ message, timecreated: date, is_mine: true });\n\n    $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n}\n\n/**\n * Open chat from experience\n * @param {int} experienceid\n */\nexport async function openChatFromExperience(experienceid) {\n    const {chatrooms} = await chatsGetRooms({experienceid});\n    renderChat(chatrooms[0].id, true);\n}\n\n/**\n * Render menu tutor\n * @returns {Promise}\n */\nexport async function renderMenuTutor() {\n    Template.render(SELECTORS.TEMPLATES.MENU_MENTOR, {}).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        return;\n    }).fail(Notification.exception);\n}"],"names":["target","experienceid","TARGET","initComponent","message","SELECTORS","INPUTS","CHAT_REPLY","val","trim","chatid","OPEN_CHAT_ID","then","date","Date","toLocaleTimeString","hour12","hour","minute","html","renderMessage","status","activeMessages","push","timecreated","is_mine","CONTAINERS","MESSAGES","append","addNewMessage","fail","Notification","exception","render","TEMPLATES","MENU_MENTOR","Status","openChatFromExperience","renderMenuChat","setInterval","reloaderMessages","chatrooms","MENU_CHAT","emptyActiveMessages","renderChat","id","hideBack","messages","CHAT","handlerMessages","promises","map","msg","Promise","all","join","error","handlerNewOtherMessage","arr1","arr2","filter","objeto1","some","objeto2","areEqualsByid","text","time","mine","TEMPLATE","MY_MESSAGE","OTHER_MESSAGE","Template"],"mappings":"wiBAgB2CA,YAAQC,oEAAe,+BACpDC,OAASF,YACnBG,cAAcF,iEA6IRG,SAAU,mBAAEC,mBAAUC,OAAOC,YAAYC,MAAMC,wDACpC,CACbC,OAAQL,mBAAUM,aAClBP,QAAAA,UACDQ,MAAK,yBACFP,mBAAUC,OAAOC,YAAYC,IAAI,mBAWdJ,eACnBS,MAAO,IAAIC,MAAOC,mBAAmB,QAAS,CAAEC,QAAQ,EAAOC,KAAM,UAAWC,OAAQ,YACxFC,WAAaC,cAAchB,QAASS,MAAM,GAChDQ,OAAOC,eAAeC,KAAK,CAAEnB,QAAAA,QAASoB,YAAaX,KAAMY,SAAS,wBAEhEpB,mBAAUqB,WAAWC,UAAUC,OAAOT,MAfpCU,CAAczB,YAEf0B,KAAKC,sBAAaC,iVA8BZC,OAAO5B,mBAAU6B,UAAUC,YAAa,IAAIvB,MAAMO,2BACrDd,mBAAUH,QAAQiB,KAAKA,SAE1BW,KAAKC,sBAAaC,yWA/LnBX,OAAS,IAAIe,sBAiBbjC,cAAiBF,wCAEfA,aACAoC,uBAAuBpC,cAEvBqC,iBAEJC,YAAYC,iBAAkB,yCAOZF,uBACZG,UAAEA,iBAAoB,kCAAc,CAACxC,aAAc,uBAChDgC,OAAO5B,mBAAU6B,UAAUQ,UAAW,CAC3CD,UAAAA,YACD7B,MAAMO,2BACHd,mBAAUH,QAAQiB,KAAKA,MACzBE,OAAOsB,yCACGhC,aAAe,yBAG1BmB,KAAKC,sBAAaC,0BASHY,WAAWC,QAAIC,uEAC3BC,SAAEA,gBAAmB,oCAAgB,CAAErC,OAAQmC,wBAC3ClC,aAAekC,sBAChBZ,OAAO5B,mBAAU6B,UAAUc,KAAM,CACtCF,SAAAA,WACDlC,MAAMO,2BACHd,mBAAUH,QAAQiB,KAAKA,MACzB8B,gBAAgBF,UAChB1B,OAAOC,eAAiByB,YAEzBjB,KAAKC,sBAAaC,0BAQHiB,gBAAgBF,cAC9B5B,KAAO,SACL+B,SAAWH,SAASI,KAAKC,YACrBhD,QAAEA,QAAFoB,YAAWA,YAAXC,QAAwBA,SAAY2B,WACnChC,cAAchB,QAASoB,YAAaC,gBAG3CN,YAAckC,QAAQC,IAAIJ,WAAWK,KAAK,wBACxClD,mBAAUqB,WAAWC,UAAUR,KAAKA,MACxC,MAAOqC,6BACQxB,UAAUwB,uBAMThB,sBACdnC,mBAAUM,oBACJoC,SAAEA,gBAAmB,oCAAgB,CAAErC,OAAQL,mBAAUM,eAC/D8C,uBAAuBV,+BASTU,uBAAuBV,cAqBnBW,KAAMC,WAnBtBT,UAmBgBQ,KApBeX,SAoBTY,KApBmBtC,OAAOC,eAqB/CoC,KAAKE,QAAOC,UACPF,KAAKG,MAAKC,kBAUHF,QAASE,gBACrBF,QAAQzD,UAAY2D,QAAQ3D,QAXF4D,CAAcH,QAASE,cArB3BZ,KAAKC,YACxBhD,QAAEA,QAAFoB,YAAWA,YAAXC,QAAwBA,SAAY2B,WAC1C/B,OAAOC,eAAeC,KAAK6B,KACpBhC,cAAchB,QAASoB,YAAaC,sBAGrCN,YAAckC,QAAQC,IAAIJ,WAAWK,KAAK,wBAC9ClD,mBAAUqB,WAAWC,UAAUC,OAAOT,MAC1C,MAAOqC,6BACQxB,UAAUwB,uBAiCTpC,cAAc6C,KAAMC,KAAMC,YACtCC,SAAWD,KAAO9D,mBAAU6B,UAAUmC,WAAahE,mBAAU6B,UAAUoC,qBACtEC,mBAAStC,OAAOmC,SAAU,CAAEH,KAAAA,KAAMC,KAAAA,sBAoCvB7B,uBAAuBpC,oBACnCwC,UAACA,iBAAmB,kCAAc,CAACxC,aAAAA,eACzC2C,WAAWH,UAAU,GAAGI,IAAI"}