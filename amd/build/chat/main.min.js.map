{"version":3,"file":"main.min.js","sources":["../../src/chat/main.js"],"sourcesContent":["import $ from 'jquery';\r\nimport Template from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport SELECTORS from './selectors';\r\nimport { getChatRooms, sendMessage, getMessages } from 'local_dta/repositories/chat_repository';\r\nimport setEventListeners from './listeners';\r\nimport Status from './status';\r\nimport mentorHandler from 'local_dta/mentors/experience_view/main';\r\n\r\nconst status = new Status();\r\n\r\n/**\r\n * Create a chat in the target\r\n * @param {string} target\r\n * @param {int} experienceid\r\n */\r\nexport default function createChatInTarget(target, experienceid = null) {\r\n    SELECTORS.TARGET = target;\r\n    initComponent(experienceid);\r\n    return;\r\n}\r\n\r\n/**\r\n * Initialize chat component\r\n * @param {*} experienceid\r\n */\r\nconst initComponent = (experienceid) => {\r\n    setEventListeners();\r\n    if (experienceid) {\r\n        openChatFromExperience(experienceid);\r\n        return;\r\n    } else {\r\n        renderMenuChat();\r\n    }\r\n    setInterval(reloaderMessages, 1000);\r\n    mentorHandler();\r\n};\r\n\r\n/**\r\n * Render menu chat\r\n */\r\nexport async function renderMenuChat() {\r\n    const { chatrooms } = await getChatRooms({experienceid: 0});\r\n    Template.render(SELECTORS.TEMPLATES.MENU_CHAT, {\r\n        chatrooms\r\n    }).then((html) => {\r\n        $(SELECTORS.TARGET).html(html);\r\n        status.emptyActiveMessages();\r\n        SELECTORS.OPEN_CHAT_ID = 0;\r\n        mentorHandler();\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n/**\r\n * Open chat\r\n * @param {number} id\r\n * @param {boolean} hideBack\r\n * Render chat\r\n */\r\nexport async function renderChat(id, hideBack = false) {\r\n    const { messages } = await getMessages({ chatid: id });\r\n    SELECTORS.OPEN_CHAT_ID = id;\r\n    Template.render(SELECTORS.TEMPLATES.CHAT, {\r\n        hideBack\r\n    }).then((html) => {\r\n        $(SELECTORS.TARGET).html(html);\r\n        handlerMessages(messages);\r\n        status.activeMessages = messages;\r\n        return;\r\n    }).fail(Notification.exception);\r\n}\r\n\r\n\r\n/**\r\n * Render messages in chat\r\n * @param {Array} messages\r\n */\r\nexport async function handlerMessages(messages) {\r\n    let html = '';\r\n    const promises = messages.map((msg) => {\r\n        const { message, timecreated, is_mine } = msg;\r\n        return renderMessage(message, timecreated, is_mine);\r\n    });\r\n    try {\r\n        html = (await Promise.all(promises)).join('');\r\n        $(SELECTORS.CONTAINERS.MESSAGES).html(html);\r\n    } catch (error) {\r\n        Notification.exception(error);\r\n    }\r\n}\r\n/**\r\n * Reload messages\r\n */\r\nexport async function reloaderMessages() {\r\n    if (SELECTORS.OPEN_CHAT_ID) {\r\n        const { messages } = await getMessages({ chatid: SELECTORS.OPEN_CHAT_ID });\r\n        handlerNewOtherMessage(messages);\r\n        return;\r\n    }\r\n}\r\n\r\n/**\r\n * Handler new other message\r\n * @param {object} messages\r\n */\r\nexport async function handlerNewOtherMessage(messages) {\r\n    const newMessages = findDefferencies(messages, status.activeMessages);\r\n    const promises = newMessages.map((msg) => {\r\n        const { message, timecreated, is_mine } = msg;\r\n        status.activeMessages.push(msg);\r\n        return renderMessage(message, timecreated, is_mine);\r\n    });\r\n    try {\r\n        const html = (await Promise.all(promises)).join('');\r\n        $(SELECTORS.CONTAINERS.MESSAGES).append(html);\r\n    } catch (error) {\r\n        Notification.exception(error);\r\n    }\r\n}\r\n\r\n/**\r\n * Check if two objects are equals\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @returns {Array}\r\n */\r\nfunction findDefferencies(arr1, arr2) {\r\n    return arr1.filter(objeto1 => {\r\n        return !arr2.some(objeto2 => areEqualsByid(objeto1, objeto2));\r\n    });\r\n}\r\n\r\n/**\r\n * Check if two objects are equals\r\n * @param {object} objeto1\r\n * @param {object} objeto2\r\n * @returns {boolean}\r\n */\r\nfunction areEqualsByid(objeto1, objeto2) {\r\n    return objeto1.message === objeto2.message;\r\n}\r\n\r\n/**\r\n * Render my message\r\n * @param {string} text\r\n * @param {string} time\r\n * @param {boolean} mine\r\n * @returns {Promise}\r\n */\r\nexport async function renderMessage(text, time, mine) {\r\n    const TEMPLATE = mine ? SELECTORS.TEMPLATES.MY_MESSAGE : SELECTORS.TEMPLATES.OTHER_MESSAGE;\r\n    return Template.render(TEMPLATE, { text, time });\r\n}\r\n\r\n/**\r\n * Handle send message\r\n * @returns {Promise}\r\n */\r\nexport async function handleSendMessage() {\r\n    const message = $(SELECTORS.INPUTS.CHAT_REPLY).val().trim();\r\n    sendMessage({\r\n        chatid: SELECTORS.OPEN_CHAT_ID,\r\n        message,\r\n    }).then(() => {\r\n        $(SELECTORS.INPUTS.CHAT_REPLY).val('');\r\n        addNewMessage(message);\r\n        return;\r\n    }).fail(Notification.exception);\r\n    return;\r\n}\r\n\r\n/**\r\n * Add new message\r\n * @param {string} message\r\n */\r\nasync function addNewMessage(message) {\r\n    const date = new Date().toLocaleTimeString('es-ES', { hour12: false, hour: '2-digit', minute: '2-digit' });\r\n    const html = await renderMessage(message, date, true);\r\n    status.activeMessages.push({ message, timecreated: date, is_mine: true });\r\n\r\n    $(SELECTORS.CONTAINERS.MESSAGES).append(html);\r\n}\r\n\r\n/**\r\n * Open chat from experience\r\n * @param {int} experienceid\r\n */\r\nexport async function openChatFromExperience(experienceid) {\r\n    const {chatrooms} = await getChatRooms({experienceid});\r\n    renderChat(chatrooms[0].id, true);\r\n}\r\n\r\n/**\r\n * Render menu mentor\r\n * @returns {Promise}\r\n */\r\nexport async function renderMenuMentor() {\r\n    Template.render(SELECTORS.TEMPLATES.MENU_MENTOR, {}).then((html) => {\r\n        $(SELECTORS.TARGET).html(html);\r\n        return;\r\n    }).fail(Notification.exception);\r\n}"],"names":["target","experienceid","TARGET","initComponent","message","SELECTORS","INPUTS","CHAT_REPLY","val","trim","chatid","OPEN_CHAT_ID","then","date","Date","toLocaleTimeString","hour12","hour","minute","html","renderMessage","status","activeMessages","push","timecreated","is_mine","CONTAINERS","MESSAGES","append","addNewMessage","fail","Notification","exception","render","TEMPLATES","MENU_MENTOR","Status","openChatFromExperience","renderMenuChat","setInterval","reloaderMessages","chatrooms","MENU_CHAT","emptyActiveMessages","renderChat","id","hideBack","messages","CHAT","handlerMessages","promises","map","msg","Promise","all","join","error","handlerNewOtherMessage","arr1","arr2","filter","objeto1","some","objeto2","areEqualsByid","text","time","mine","TEMPLATE","MY_MESSAGE","OTHER_MESSAGE","Template"],"mappings":"8dAgB2CA,YAAQC,oEAAe,+BACpDC,OAASF,YACnBG,cAAcF,iEA8IRG,SAAU,mBAAEC,mBAAUC,OAAOC,YAAYC,MAAMC,mDACzC,CACRC,OAAQL,mBAAUM,aAClBP,QAAAA,UACDQ,MAAK,yBACFP,mBAAUC,OAAOC,YAAYC,IAAI,mBAWdJ,eACnBS,MAAO,IAAIC,MAAOC,mBAAmB,QAAS,CAAEC,QAAQ,EAAOC,KAAM,UAAWC,OAAQ,YACxFC,WAAaC,cAAchB,QAASS,MAAM,GAChDQ,OAAOC,eAAeC,KAAK,CAAEnB,QAAAA,QAASoB,YAAaX,KAAMY,SAAS,wBAEhEpB,mBAAUqB,WAAWC,UAAUC,OAAOT,MAfpCU,CAAczB,YAEf0B,KAAKC,sBAAaC,kVA8BZC,OAAO5B,mBAAU6B,UAAUC,YAAa,IAAIvB,MAAMO,2BACrDd,mBAAUH,QAAQiB,KAAKA,SAE1BW,KAAKC,sBAAaC,yWAhMnBX,OAAS,IAAIe,sBAiBbjC,cAAiBF,wCAEfA,aACAoC,uBAAuBpC,eAGvBqC,iBAEJC,YAAYC,iBAAkB,0CAOZF,uBACZG,UAAEA,iBAAoB,iCAAa,CAACxC,aAAc,uBAC/CgC,OAAO5B,mBAAU6B,UAAUQ,UAAW,CAC3CD,UAAAA,YACD7B,MAAMO,2BACHd,mBAAUH,QAAQiB,KAAKA,MACzBE,OAAOsB,yCACGhC,aAAe,yBAG1BmB,KAAKC,sBAAaC,0BASHY,WAAWC,QAAIC,uEAC3BC,SAAEA,gBAAmB,gCAAY,CAAErC,OAAQmC,wBACvClC,aAAekC,sBAChBZ,OAAO5B,mBAAU6B,UAAUc,KAAM,CACtCF,SAAAA,WACDlC,MAAMO,2BACHd,mBAAUH,QAAQiB,KAAKA,MACzB8B,gBAAgBF,UAChB1B,OAAOC,eAAiByB,YAEzBjB,KAAKC,sBAAaC,0BAQHiB,gBAAgBF,cAC9B5B,KAAO,SACL+B,SAAWH,SAASI,KAAKC,YACrBhD,QAAEA,QAAFoB,YAAWA,YAAXC,QAAwBA,SAAY2B,WACnChC,cAAchB,QAASoB,YAAaC,gBAG3CN,YAAckC,QAAQC,IAAIJ,WAAWK,KAAK,wBACxClD,mBAAUqB,WAAWC,UAAUR,KAAKA,MACxC,MAAOqC,6BACQxB,UAAUwB,uBAMThB,sBACdnC,mBAAUM,oBACJoC,SAAEA,gBAAmB,gCAAY,CAAErC,OAAQL,mBAAUM,eAC3D8C,uBAAuBV,+BASTU,uBAAuBV,cAqBnBW,KAAMC,WAnBtBT,UAmBgBQ,KApBeX,SAoBTY,KApBmBtC,OAAOC,eAqB/CoC,KAAKE,QAAOC,UACPF,KAAKG,MAAKC,kBAUHF,QAASE,gBACrBF,QAAQzD,UAAY2D,QAAQ3D,QAXF4D,CAAcH,QAASE,cArB3BZ,KAAKC,YACxBhD,QAAEA,QAAFoB,YAAWA,YAAXC,QAAwBA,SAAY2B,WAC1C/B,OAAOC,eAAeC,KAAK6B,KACpBhC,cAAchB,QAASoB,YAAaC,sBAGrCN,YAAckC,QAAQC,IAAIJ,WAAWK,KAAK,wBAC9ClD,mBAAUqB,WAAWC,UAAUC,OAAOT,MAC1C,MAAOqC,6BACQxB,UAAUwB,uBAiCTpC,cAAc6C,KAAMC,KAAMC,YACtCC,SAAWD,KAAO9D,mBAAU6B,UAAUmC,WAAahE,mBAAU6B,UAAUoC,qBACtEC,mBAAStC,OAAOmC,SAAU,CAAEH,KAAAA,KAAMC,KAAAA,sBAoCvB7B,uBAAuBpC,oBACnCwC,UAACA,iBAAmB,iCAAa,CAACxC,aAAAA,eACxC2C,WAAWH,UAAU,GAAGI,IAAI"}