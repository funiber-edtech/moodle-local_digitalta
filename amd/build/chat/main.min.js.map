{"version":3,"file":"main.min.js","sources":["../../src/chat/main.js"],"sourcesContent":["import $ from 'jquery';\nimport Template from 'core/templates';\nimport Notification from 'core/notification';\nimport SELECTORS from './selectors';\nimport { getChatRooms, sendMessage, getMessages } from 'local_dta/repositories/chat_repository';\nimport setEventListeners from './listeners';\nimport Status from './status';\n\nconst status = new Status();\n\n/**\n * Create a chat in the target\n * @param {string} target\n */\nexport default function createChatInTarget(target) {\n    SELECTORS.TARGET = target;\n    initComponent();\n    return;\n}\n\n// Initialize the component\nconst initComponent = () => {\n    setEventListeners();\n    renderMenuChat();\n    setInterval(reloaderMessages, 1000);\n};\n\n/**\n * Render menu chat\n */\nexport async function renderMenuChat() {\n    const { chatrooms } = await getChatRooms();\n    Template.render(SELECTORS.TEMPLATES.MENU_CHAT, {\n        chatrooms\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        status.emptyActiveMessages();\n        SELECTORS.OPEN_CHAT_ID = 0;\n        return;\n    }).fail(Notification.exception);\n}\n\n/**\n * Open chat\n * @param {number} id\n * Render chat\n */\nexport async function renderChat(id) {\n    const { messages } = await getMessages({ chatid: id });\n    SELECTORS.OPEN_CHAT_ID = id;\n    Template.render(SELECTORS.TEMPLATES.CHAT, {\n        SELECTORS\n    }).then((html) => {\n        $(SELECTORS.TARGET).html(html);\n        handlerMessages(messages);\n        status.activeMessages = messages;\n        return;\n    }).fail(Notification.exception);\n}\n\n\n/**\n * Render messages in chat\n * @param {Array} messages\n */\nexport async function handlerMessages(messages) {\n    let html = '';\n    const promises = messages.map((msg) => {\n        const { message, timecreated, is_mine } = msg;\n        return renderMessage(message, timecreated, is_mine);\n    });\n    try {\n        html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).html(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n/**\n * Reload messages\n */\nexport async function reloaderMessages() {\n    if (SELECTORS.OPEN_CHAT_ID) {\n        const { messages } = await getMessages({ chatid: SELECTORS.OPEN_CHAT_ID });\n        handlerNewOtherMessage(messages);\n        return;\n    }\n}\n\n/**\n * Handler new other message\n * @param {object} messages\n */\nexport async function handlerNewOtherMessage(messages) {\n    const newMessages = findDefferencies(messages, status.activeMessages);\n    const promises = newMessages.map((msg) => {\n        const { message, timecreated, is_mine } = msg;\n        status.activeMessages.push(msg);\n        return renderMessage(message, timecreated, is_mine);\n    });\n    try {\n        const html = (await Promise.all(promises)).join('');\n        $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Check if two objects are equals\n * @param {Array} arr1\n * @param {Array} arr2\n * @returns {Array}\n */\nfunction findDefferencies(arr1, arr2) {\n    return arr1.filter(objeto1 => {\n        return !arr2.some(objeto2 => areEqualsByid(objeto1, objeto2));\n    });\n}\n\n/**\n * Check if two objects are equals\n * @param {object} objeto1\n * @param {object} objeto2\n * @returns {boolean}\n */\nfunction areEqualsByid(objeto1, objeto2) {\n    return objeto1.message === objeto2.message;\n}\n\n/**\n * Render my message\n * @param {string} text\n * @param {string} time\n * @param {boolean} mine\n * @returns {Promise}\n */\nexport async function renderMessage(text, time, mine) {\n    const TEMPLATE = mine ? SELECTORS.TEMPLATES.MY_MESSAGE : SELECTORS.TEMPLATES.OTHER_MESSAGE;\n    return Template.render(TEMPLATE, { text, time });\n}\n\n/**\n * Handle send message\n * @returns {Promise}\n */\nexport async function handleSendMessage() {\n    const message = $(SELECTORS.INPUTS.CHAT_REPLY).val().trim();\n    sendMessage({\n        chatid: SELECTORS.OPEN_CHAT_ID,\n        message,\n    }).then(() => {\n        $(SELECTORS.INPUTS.CHAT_REPLY).val('');\n        addNewMessage(message);\n        return;\n    }).fail(Notification.exception);\n    return;\n}\n\n/**\n * Add new message\n * @param {string} message\n */\nasync function addNewMessage(message) {\n    const date = new Date().toLocaleTimeString('es-ES', { hour12: false, hour: '2-digit', minute: '2-digit' });\n    const html = await renderMessage(message, date, true);\n    status.activeMessages.push({ message, timecreated: date, is_mine: true });\n\n    $(SELECTORS.CONTAINERS.MESSAGES).append(html);\n}"],"names":["target","TARGET","initComponent","message","SELECTORS","INPUTS","CHAT_REPLY","val","trim","chatid","OPEN_CHAT_ID","then","date","Date","toLocaleTimeString","hour12","hour","minute","html","renderMessage","status","activeMessages","push","timecreated","is_mine","CONTAINERS","MESSAGES","append","addNewMessage","fail","Notification","exception","id","messages","render","TEMPLATES","CHAT","handlerMessages","renderMenuChat","setInterval","reloaderMessages","chatrooms","MENU_CHAT","emptyActiveMessages","promises","map","msg","Promise","all","join","error","handlerNewOtherMessage","arr1","arr2","filter","objeto1","some","objeto2","areEqualsByid","text","time","mine","TEMPLATE","MY_MESSAGE","OTHER_MESSAGE","Template"],"mappings":"+aAc2CA,kCAC7BC,OAASD,YACnBE,mEAmIMC,SAAU,mBAAEC,mBAAUC,OAAOC,YAAYC,MAAMC,mDACzC,CACRC,OAAQL,mBAAUM,aAClBP,QAAAA,UACDQ,MAAK,yBACFP,mBAAUC,OAAOC,YAAYC,IAAI,mBAWdJ,eACnBS,MAAO,IAAIC,MAAOC,mBAAmB,QAAS,CAAEC,QAAQ,EAAOC,KAAM,UAAWC,OAAQ,YACxFC,WAAaC,cAAchB,QAASS,MAAM,GAChDQ,OAAOC,eAAeC,KAAK,CAAEnB,QAAAA,QAASoB,YAAaX,KAAMY,SAAS,wBAEhEpB,mBAAUqB,WAAWC,UAAUC,OAAOT,MAfpCU,CAAczB,YAEf0B,KAAKC,sBAAaC,0LA5GQC,UACvBC,SAAEA,gBAAmB,gCAAY,CAAExB,OAAQuB,wBACvCtB,aAAesB,sBAChBE,OAAO9B,mBAAU+B,UAAUC,KAAM,CACtChC,UAAAA,qBACDO,MAAMO,2BACHd,mBAAUH,QAAQiB,KAAKA,MACzBmB,gBAAgBJ,UAChBb,OAAOC,eAAiBY,YAEzBJ,KAAKC,sBAAaC,oUAjDnBX,OAAS,6DAaTlB,cAAgB,8BAElBoC,iBACAC,YAAYC,iBAAkB,qBAMZF,uBACZG,UAAEA,iBAAoB,sDACnBP,OAAO9B,mBAAU+B,UAAUO,UAAW,CAC3CD,UAAAA,YACD9B,MAAMO,2BACHd,mBAAUH,QAAQiB,KAAKA,MACzBE,OAAOuB,yCACGjC,aAAe,KAE1BmB,KAAKC,sBAAaC,0BA0BHM,gBAAgBJ,cAC9Bf,KAAO,SACL0B,SAAWX,SAASY,KAAKC,YACrB3C,QAAEA,QAAFoB,YAAWA,YAAXC,QAAwBA,SAAYsB,WACnC3B,cAAchB,QAASoB,YAAaC,gBAG3CN,YAAc6B,QAAQC,IAAIJ,WAAWK,KAAK,wBACxC7C,mBAAUqB,WAAWC,UAAUR,KAAKA,MACxC,MAAOgC,6BACQnB,UAAUmB,uBAMTV,sBACdpC,mBAAUM,oBACJuB,SAAEA,gBAAmB,gCAAY,CAAExB,OAAQL,mBAAUM,eAC3DyC,uBAAuBlB,+BASTkB,uBAAuBlB,cAqBnBmB,KAAMC,WAnBtBT,UAmBgBQ,KApBenB,SAoBToB,KApBmBjC,OAAOC,eAqB/C+B,KAAKE,QAAOC,UACPF,KAAKG,MAAKC,kBAUHF,QAASE,gBACrBF,QAAQpD,UAAYsD,QAAQtD,QAXFuD,CAAcH,QAASE,cArB3BZ,KAAKC,YACxB3C,QAAEA,QAAFoB,YAAWA,YAAXC,QAAwBA,SAAYsB,WAC1C1B,OAAOC,eAAeC,KAAKwB,KACpB3B,cAAchB,QAASoB,YAAaC,sBAGrCN,YAAc6B,QAAQC,IAAIJ,WAAWK,KAAK,wBAC9C7C,mBAAUqB,WAAWC,UAAUC,OAAOT,MAC1C,MAAOgC,6BACQnB,UAAUmB,uBAiCT/B,cAAcwC,KAAMC,KAAMC,YACtCC,SAAWD,KAAOzD,mBAAU+B,UAAU4B,WAAa3D,mBAAU+B,UAAU6B,qBACtEC,mBAAS/B,OAAO4B,SAAU,CAAEH,KAAAA,KAAMC,KAAAA"}