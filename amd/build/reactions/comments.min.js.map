{"version":3,"file":"comments.min.js","sources":["../../src/reactions/comments.js"],"sourcesContent":["import $ from \"jquery\";\nimport Template from \"core/templates\";\nimport Notification from \"core/notification\";\nimport { SELECTORS } from \"./selectors\";\nimport { addComment, getComments } from \"../repositories/reactions_repository\";\n\n/**\n * Send the comment to the server.\n * @return {void}\n */\nexport function sendComment() {\n    const component = $(SELECTORS.BUTTONS.comment).data(\"component\");\n    const componentinstance = $(SELECTORS.ACTIONS.sendComment).data(\"id\");\n    const comment = $(SELECTORS.COMMENTS.input).val().trim();\n\n    if (comment) {\n        addComment({ component, componentinstance, comment })\n            .then((response) => {\n                if (response.result) {\n                    return updateUI();\n                }\n                return Notification.exception(response);\n            })\n            .fail(Notification.exception);\n        $(SELECTORS.COMMENTS.input).val(\"\");\n    }\n}\n\n/**\n * Update the comments in the UI.\n * @return {void}\n */\nexport async function updateUI() {\n    const component = $(SELECTORS.BUTTONS.comment).data(\"component\");\n    const componentinstance = $(SELECTORS.ACTIONS.sendComment).data(\"id\");\n    if (!componentinstance) {\n        return;\n    }\n    try {\n        const response = await getComments({ component, componentinstance });\n        let comments = [];\n        if (response.result && response.comments) {\n            comments = response.comments.map((comment) => ({\n                comment: comment.comment,\n                userfullname: comment.user.fullname,\n                userprofileurl: M.cfg.wwwroot + \"/user/profile.php?id=\" + comment.user.id,\n            }));\n        }\n        const html = await Template.render(\"local_dta/reactions/comments\", { comments });\n        $(SELECTORS.COMMENTS.list).html(html);\n        const button = $(SELECTORS.ACTIONS.viewComment + SELECTORS.DATA.id(componentinstance));\n              button.toggleClass(\"active\", button.hasClass(\"show\"));\n        $(SELECTORS.ACTIONS.viewComment + SELECTORS.DATA.id(componentinstance) + \" span\").text(\n            comments.length ? comments.length : \"\"\n        );\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n"],"names":["updateUI","component","SELECTORS","BUTTONS","comment","data","componentinstance","ACTIONS","sendComment","response","comments","result","map","userfullname","user","fullname","userprofileurl","M","cfg","wwwroot","id","html","Template","render","COMMENTS","list","button","viewComment","DATA","toggleClass","hasClass","text","length","error","exception","input","val","trim","then","Notification","fail"],"mappings":"4UAgCsBA,iBACZC,WAAY,mBAAEC,qBAAUC,QAAQC,SAASC,KAAK,aAC9CC,mBAAoB,mBAAEJ,qBAAUK,QAAQC,aAAaH,KAAK,SAC3DC,4BAIKG,eAAiB,qCAAY,CAAER,UAAAA,UAAWK,kBAAAA,wBAC5CI,SAAW,GACXD,SAASE,QAAUF,SAASC,WAC5BA,SAAWD,SAASC,SAASE,KAAKR,WAC9BA,QAASA,QAAQA,QACjBS,aAAcT,QAAQU,KAAKC,SAC3BC,eAAgBC,EAAEC,IAAIC,QAAU,wBAA0Bf,QAAQU,KAAKM,cAGzEC,WAAaC,mBAASC,OAAO,+BAAgC,CAAEb,SAAAA,+BACnER,qBAAUsB,SAASC,MAAMJ,KAAKA,YAC1BK,QAAS,mBAAExB,qBAAUK,QAAQoB,YAAczB,qBAAU0B,KAAKR,GAAGd,oBAC7DoB,OAAOG,YAAY,SAAUH,OAAOI,SAAS,6BACjD5B,qBAAUK,QAAQoB,YAAczB,qBAAU0B,KAAKR,GAAGd,mBAAqB,SAASyB,KAC9ErB,SAASsB,OAAStB,SAASsB,OAAS,IAE1C,MAAOC,6BACQC,UAAUD,sGA7CrBhC,WAAY,mBAAEC,qBAAUC,QAAQC,SAASC,KAAK,aAC9CC,mBAAoB,mBAAEJ,qBAAUK,QAAQC,aAAaH,KAAK,MAC1DD,SAAU,mBAAEF,qBAAUsB,SAASW,OAAOC,MAAMC,OAE9CjC,+CACW,CAAEH,UAAAA,UAAWK,kBAAAA,kBAAmBF,QAAAA,UACtCkC,MAAM7B,UACCA,SAASE,OACFX,WAEJuC,sBAAaL,UAAUzB,YAEjC+B,KAAKD,sBAAaL,+BACrBhC,qBAAUsB,SAASW,OAAOC,IAAI"}