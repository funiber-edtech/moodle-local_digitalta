{"version":3,"file":"comments.min.js","sources":["../../src/reactions/comments.js"],"sourcesContent":["import $ from \"jquery\";\nimport Template from \"core/templates\";\nimport Notification from \"core/notification\";\nimport { SELECTORS } from \"local_digitalta/reactions/selectors\";\nimport { reactionsAddComment, reactionsGetComments } from \"local_digitalta/repositories/reactions_repository\";\n\n/**\n * Send the comment to the server.\n * @return {void}\n */\nexport function sendComment() {\n    const component = $(SELECTORS.BUTTONS.comment).data(\"component\");\n    const componentinstance = $(SELECTORS.ACTIONS.sendComment).data(\"id\");\n    const comment = $(SELECTORS.COMMENTS.input).val().trim();\n\n    if (comment) {\n        reactionsAddComment({ component, componentinstance, comment })\n            .then((response) => {\n                if (response.result) {\n                    return updateUI();\n                }\n                return Notification.exception(response);\n            })\n            .fail(Notification.exception);\n        $(SELECTORS.COMMENTS.input).val(\"\");\n    }\n}\n\n/**\n * Update the comments in the UI.\n * @return {void}\n */\nexport async function updateUI() {\n    const component = $(SELECTORS.BUTTONS.comment).data(\"component\");\n    const componentinstance = $(SELECTORS.ACTIONS.sendComment).data(\"id\");\n    if (!componentinstance) {\n        return;\n    }\n    try {\n        const response = await reactionsGetComments({ component, componentinstance });\n        let comments = [];\n        if (response.result && response.comments) {\n            comments = response.comments.map((comment) => ({\n                comment: comment.comment,\n                created: comment.created_raw,\n                userfullname: comment.user.fullname,\n                userprofileurl: M.cfg.wwwroot + \"/local/digitalta/pages/profile/index.php?id=\" + comment.user.id,\n            }));\n        }\n        const html = await Template.render(\"local_digitalta/reactions/comments\", { comments });\n        $(SELECTORS.COMMENTS.list).html(html);\n        $(SELECTORS.ACTIONS.viewComments + SELECTORS.DATA.id(componentinstance) + \" span\").text(\n            comments.length ? comments.length : \"\"\n        );\n    } catch (error) {\n        Notification.exception(error);\n    }\n}"],"names":["updateUI","component","SELECTORS","BUTTONS","comment","data","componentinstance","ACTIONS","sendComment","response","comments","result","map","created","created_raw","userfullname","user","fullname","userprofileurl","M","cfg","wwwroot","id","html","Template","render","COMMENTS","list","viewComments","DATA","text","length","error","exception","input","val","trim","then","Notification","fail"],"mappings":"uXAgCsBA,iBACZC,WAAY,mBAAEC,qBAAUC,QAAQC,SAASC,KAAK,aAC9CC,mBAAoB,mBAAEJ,qBAAUK,QAAQC,aAAaH,KAAK,SAC3DC,4BAIKG,eAAiB,8CAAqB,CAAER,UAAAA,UAAWK,kBAAAA,wBACrDI,SAAW,GACXD,SAASE,QAAUF,SAASC,WAC5BA,SAAWD,SAASC,SAASE,KAAKR,WAC9BA,QAASA,QAAQA,QACjBS,QAAST,QAAQU,YACjBC,aAAcX,QAAQY,KAAKC,SAC3BC,eAAgBC,EAAEC,IAAIC,QAAU,+CAAiDjB,QAAQY,KAAKM,cAGhGC,WAAaC,mBAASC,OAAO,qCAAsC,CAAEf,SAAAA,+BACzER,qBAAUwB,SAASC,MAAMJ,KAAKA,0BAC9BrB,qBAAUK,QAAQqB,aAAe1B,qBAAU2B,KAAKP,GAAGhB,mBAAqB,SAASwB,KAC/EpB,SAASqB,OAASrB,SAASqB,OAAS,IAE1C,MAAOC,6BACQC,UAAUD,sGA5CrB/B,WAAY,mBAAEC,qBAAUC,QAAQC,SAASC,KAAK,aAC9CC,mBAAoB,mBAAEJ,qBAAUK,QAAQC,aAAaH,KAAK,MAC1DD,SAAU,mBAAEF,qBAAUwB,SAASQ,OAAOC,MAAMC,OAE9ChC,wDACoB,CAAEH,UAAAA,UAAWK,kBAAAA,kBAAmBF,QAAAA,UAC/CiC,MAAM5B,UACCA,SAASE,OACFX,WAEJsC,sBAAaL,UAAUxB,YAEjC8B,KAAKD,sBAAaL,+BACrB/B,qBAAUwB,SAASQ,OAAOC,IAAI"}