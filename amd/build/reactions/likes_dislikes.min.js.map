{"version":3,"file":"likes_dislikes.min.js","sources":["../../src/reactions/likes_dislikes.js"],"sourcesContent":["import $ from \"jquery\";\nimport { toogleLikeAndDislike } from \"local_dta/repositories/reactions_repository\";\nimport { SELECTORS } from \"./selectors\";\nimport Notification from \"core/notification\";\n\n/**\n * Update the like and dislike buttons in the UI.\n * @param {number} instanceid - The id of the experience.\n * @param {number} likes - The number of likes.\n * @param {number} dislikes - The number of dislikes.\n * @param {number} reaction - The reaction to add. 1 for like, 0 for dislike.\n * @return {void}\n */\nfunction updateUI(instanceid, likes, dislikes, reaction) {\n  const reactionSelectors = {\n    1: SELECTORS.BUTTONS.likes,\n    0: SELECTORS.BUTTONS.dislikes,\n  };\n\n  $(SELECTORS.BUTTONS.likes + SELECTORS.DATA.id(instanceid)).removeClass(\"active\");\n  $(SELECTORS.BUTTONS.dislikes + SELECTORS.DATA.id(instanceid)).removeClass(\"active\");\n\n  if (reactionSelectors.hasOwnProperty(reaction)) {\n    $(reactionSelectors[reaction] + SELECTORS.DATA.id(instanceid)).addClass(\"active\");\n  }\n\n  const likesText = likes ? likes : \"\";\n  $(SELECTORS.DATA.id(instanceid) + SELECTORS.COUNTS.likes).text(likesText);\n}\n\n/**\n * Toggle the like and dislike buttons.\n * @param {number} instanceid - The id of the instance\n * @param {number} reaction - The reaction to add. 1 for like, 0 for dislike.\n */\nexport function toggle(instanceid, reaction = null) {\n  const instancetype = $(SELECTORS.BUTTONS.likes).data(\"instance\");\n  const reactionSelectors = {\n    1: SELECTORS.BUTTONS.likes,\n    0: SELECTORS.BUTTONS.dislikes,\n  };\n  const isActive = $(reactionSelectors[reaction] + SELECTORS.DATA.id(instanceid)).hasClass(\"active\");\n  const action = isActive ? null : reaction;\n  toogleLikeAndDislike({instancetype, instanceid, action})\n    .then((response) => {\n      return updateUI(instanceid, response.likes, response.dislikes, action);\n    })\n    .fail(Notification.exception);\n}\n"],"names":["updateUI","instanceid","likes","dislikes","reaction","reactionSelectors","SELECTORS","BUTTONS","DATA","id","removeClass","hasOwnProperty","addClass","likesText","COUNTS","text","instancetype","data","isActive","hasClass","action","then","response","fail","Notification","exception"],"mappings":"uTAaSA,SAASC,WAAYC,MAAOC,SAAUC,gBACvCC,kBAAoB,GACrBC,qBAAUC,QAAQL,QAClBI,qBAAUC,QAAQJ,8BAGrBG,qBAAUC,QAAQL,MAAQI,qBAAUE,KAAKC,GAAGR,aAAaS,YAAY,8BACrEJ,qBAAUC,QAAQJ,SAAWG,qBAAUE,KAAKC,GAAGR,aAAaS,YAAY,UAEtEL,kBAAkBM,eAAeP,+BACjCC,kBAAkBD,UAAYE,qBAAUE,KAAKC,GAAGR,aAAaW,SAAS,gBAGpEC,UAAYX,OAAgB,uBAChCI,qBAAUE,KAAKC,GAAGR,YAAcK,qBAAUQ,OAAOZ,OAAOa,KAAKF,4FAQ1CZ,gBAAYG,gEAAW,WACtCY,cAAe,mBAAEV,qBAAUC,QAAQL,OAAOe,KAAK,YAC/CZ,kBAAoB,GACrBC,qBAAUC,QAAQL,QAClBI,qBAAUC,QAAQJ,UAEjBe,UAAW,mBAAEb,kBAAkBD,UAAYE,qBAAUE,KAAKC,GAAGR,aAAakB,SAAS,UACnFC,OAASF,SAAW,KAAOd,wDACZ,CAACY,aAAAA,aAAcf,WAAAA,WAAYmB,OAAAA,SAC7CC,MAAMC,UACEtB,SAASC,WAAYqB,SAASpB,MAAOoB,SAASnB,SAAUiB,UAEhEG,KAAKC,sBAAaC"}