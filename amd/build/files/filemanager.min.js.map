{"version":3,"file":"filemanager.min.js","sources":["../../src/files/filemanager.js"],"sourcesContent":["import $ from \"jquery\";\nimport {\n  prepareDraftAreaHTML,\n  filesUploadFromDraft,\n} from \"local_digitalta/repositories/files_repository\";\nimport Notification from \"core/notification\";\n\n/**\n * Prepare the draft area HTML.\n * @param {string} fileArea - The area of the file.\n * @param {string} component - The component.\n * @param {number} fileContextId - The context id.\n * @return {Promise} Resolve with warnings.\n */\nexport const prepareDraftHTML = (fileArea, component, fileContextId) => {\n  return prepareDraftAreaHTML({\n    filearea: fileArea,\n    component: component,\n    filecontextid: fileContextId,\n  })\n    .then((response) => {\n      return response;\n    })\n    .fail(Notification.exception);\n};\n\n/**\n * Save files to the server.\n * @param {string} containerId - The id of the container.\n * @param {string} fileinputId - The id of the file input.\n * @param {string} fileid - The id of the file.\n * @param {string} filearea - The area of the file.\n * @param {number} contextid - The context id.\n * @return {Promise} Resolve with warnings.\n */\nexport const saveFiles = (\n  containerId,\n  fileinputId,\n  fileid,\n  filearea,\n  contextid = 1\n) => {\n  const fileContainer = $(`#${containerId} `);\n  const draftid = fileContainer.find(`#${fileinputId}`).attr(\"Value\");\n  return filesUploadFromDraft({\n    draftid,\n    fileid,\n    filearea,\n    contextid,\n  })\n    .then((response) => {\n      return response;\n    })\n    .fail(Notification.exception);\n};\n\n/**\n     * Generates a 6-digit number from a filename.\n     * @param {string} filename - The name of the file to generate the hash for.\n     * @return {string} A 6-digit number based on the filename.\n     */\nexport const generateFileHash = (filename) => {\n    let hash = 0;\n\n    for (let i = 0; i < filename.length; i++) {\n        const char = filename.charCodeAt(i);\n        hash = hash * 31 + char;\n    }\n\n    hash = Math.abs(hash) % 1000000;\n\n    let hashString = hash.toString();\n\n    while (hashString.length < 6) {\n        hashString = '0' + hashString;\n    }\n\n    return hashString;\n};\n\n/**\n * Initialize the file manager.\n * @param {string} containerId - The id of the container.\n * @return {void}\n */\nexport const init = (containerId) => {\n  $(`#${containerId}`).html(M.custom.filemanager.html);\n};\n"],"names":["fileArea","component","fileContextId","filearea","filecontextid","then","response","fail","Notification","exception","containerId","fileinputId","fileid","contextid","fileContainer","draftid","find","attr","filename","hash","i","length","charCodeAt","Math","abs","hashString","toString","html","M","custom","filemanager"],"mappings":"4hBAcgC,CAACA,SAAUC,UAAWC,iBAC7C,0CAAqB,CAC1BC,SAAUH,SACVC,UAAWA,UACXG,cAAeF,gBAEdG,MAAMC,UACEA,WAERC,KAAKC,sBAAaC,8BAYE,SACvBC,YACAC,YACAC,OACAT,cACAU,iEAAY,QAENC,eAAgB,mBAAG,IAAGJ,gBACtBK,QAAUD,cAAcE,KAAM,IAAGL,eAAeM,KAAK,gBACpD,0CAAqB,CAC1BF,QAAAA,QACAH,OAAAA,OACAT,SAAAA,SACAU,UAAAA,YAECR,MAAMC,UACEA,WAERC,KAAKC,sBAAaC,sCAQUS,eACzBC,KAAO,MAEN,IAAIC,EAAI,EAAGA,EAAIF,SAASG,OAAQD,IAAK,CAEtCD,KAAc,GAAPA,KADMD,SAASI,WAAWF,GAIrCD,KAAOI,KAAKC,IAAIL,MAAQ,QAEpBM,WAAaN,KAAKO,gBAEfD,WAAWJ,OAAS,GACvBI,WAAa,IAAMA,kBAGhBA,0BAQUf,kCAChB,IAAGA,eAAeiB,KAAKC,EAAEC,OAAOC,YAAYH"}